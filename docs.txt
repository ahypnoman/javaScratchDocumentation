documentation = {
    "Tutorials": {
        "visible": true,
        "isTitle": true
    },
    "Tutorials:Basic cloud storage tutorial":{
           "visible": true,
           "name": "Basic cloud storage tutorial",
           "content": `
<div><div>This tutorial will walk you through how to create a basic cloud storage and querying system. It will cover the all elements you will need to make simple cloud projects (both client and server side). The result of this tutorial will be a system allowing users to assign themselves "tags" and look up other people's "tags".</div>
<br>
<div><h3>Requirements</h3>
<ul style="margin-top: 0">
<li>A Scratch account with Scratcher status and that is not banned.</li>
<li>A computer with NPM installed</li>
<li>An IDE (Code editor) for Javascript with Node support and preferably a built-in terminal (It can be done without it, however his tutorial will not cover how)</li>
</ul>
Don't have NPM, Node or an IDE? Node and NPM can be downloaded <a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm">here</a>, and a lightweight IDE called VS Code can be installed <a href="https://code.visualstudio.com/download">here</a>.</div>
<br>
<h3>Setting up your development environment</h3><div>
First, create a new Node project. Once created, open your terminal and run this code: <span class="codeSmall">npm i https://github.com/ahypnoman/javaScratch</span>. This will install javaScratch and all it's dependencies.

<br><br>Next, log into Scratch with an account of your choice that meets requirements and create a new project. (This tutorial will use the fictional account "abc123" and will have the password "cba321")

<br><br>Now copy the project ID (the number before the last slash) in the URL (You will need this later - this tutorial will use the project ID "987654321").
</div>
<br>
<h3>Creating a basic client side (Scratch)</h3><div>
The first step in writing any cloud project is creating a rudimentary client side. This will be fleshed out later, but for now the goal is to create a system that allows you to type text that is encoded and sent over cloud variables.

<br><br>The best place to start is by making a custom block to convert text into numbers so that you can communicate with the server later (this is because cloud variables can only be changed to numbers). In "Sprite1", delete the "my variable" variable and create a new custom block (This tutorial will refer to it as "E/D:Encode"). Tick "Run without screen refresh" and add a circle input (This tutorial will use the name "To encode").<br><br><img src="https://github.com/ahypnoman/javaScratchDocumentation/blob/main/images/createCustomBlock.png?raw=true" alt="Creating custom block: E/D:Encode (To Encode)" style="max-width: min(100%, 600px);">
<br><br>Additionally create 2 sprite-only variables (this tutorial will refer to them as "E/D:Index" and "E/D:Output") and a sprite-only list (which will be referred to as "E/D:Key")
<br><br>Now add this code to the custom block:<br><br><img src="https://github.com/ahypnoman/javaScratchDocumentation/blob/main/images/populateCustomBlock1.png?raw=true" alt="Populating custom block: E/D:Encode (To encode)" style="max-width: min(100%, 600px);">
<br><br>This will iterate over all characters in the "To encode" argument and matches the against the "E/D:Key" list to output to the "E/D:Output" variable.

<br><br>For the custom block to work you will first need to populate the "E/D:Key" list. Enter these values:
<ol>
<li><i>Empty</i></li>
<li><i>Empty</i></li>
<li><i>Empty</i></li>
<li><i>Empty</i></li>
<li><i>Empty</i></li>
<li><i>Empty</i></li>
<li><i>Empty</i></li>
<li><i>Empty</i></li>
<li><i>Empty</i></li>
<li>a</li>
<li>b</li>
<li>c</li>
<li>d</li>
<li>e</li>
<li>f</li>
<li>g</li>
<li>h</li>
<li>i</li>
<li>j</li>
<li>k</li>
<li>l</li>
<li>m</li>
<li>n</li>
<li>o</li>
<li>p</li>
<li>q</li>
<li>r</li>
<li>s</li>
<li>t</li>
<li>u</li>
<li>v</li>
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>0</li>
<li>-</li>
<li>_</li>
<li>/</li>
<li><i>Space</i></li>
</ol>
Now try running the custom block with the input "abcd". You should see an output of "10111213" if your code works.

<br><br>The next step is creating a prompt for the user (this is just for testing). First create a new variable and tick "Cloud variable (stored on server)". This variable will be the variable that the client uses to send data to the server (this will be referred to as "☁ To host"). Now you need to create a prompt for the user. Place an event hat block of your choice (this tutorial will use "when [space] key pressed"), then populate it with this code:
<br><br><img src="https://github.com/ahypnoman/javaScratchDocumentation/blob/main/images/populateHat1.png?raw=true" alt="Populating hat block: when [space] key pressed" style="max-width: min(100%, 600px);"></div>
<br>This will ask the user for in put, convert it into numbers, and then send it to the server by setting the cloud variable "☁ To host".

<br><br>You can now hide all variables.

<br><br>With the basics of the client side done you can now move on to the server.
<br>
</div>
<br>
<h3>Creating a basic server side (NodeJS)</h3>
<div>
Much like the last section, this will be a simple server side for allowing communication with the client. The goal of this section is to create a node prompt allowing the server admin to send messages to the client.

Start by writing this code:
<div class="codeDemo" style="margin-bottom: 8px"><h3>Code</h3><div class="codeDemoContainer">//Load javaScratch and set up session
<span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"abc123"</span>, <span style="color:var(--theme-string)">"cba321"</span>)
//Set up project variable
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">Project</span>(<span style="color:var(--theme-string)">"987654321"</span>)
//Event listener that runs once the session has been initialised
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () =&gt; {
   //Code will go here later
}
//Initialise the session
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div>
You'll need this code - or a variation of it - in every javaScratch project. It loads javaScratch, sets up a session, initialises it, then runs your code. Your code goes into the <span class="codeSmall">onReady</span> function. Note that the "username" parameter of the <span class="codeSmall">Session()</span> constructor function is case sensitive - if your username is not capitalised correctly cloud operations will not work.

<br><br>The next step is to create a cloud socket. This code goes into the <span class="codeSmall">onReady</span> function:
<div class="codeDemo" style="margin-bottom: 8px"><h3>Code</h3><div class="codeDemoContainer">//Define cloud socket variable
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">socket</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">project</span>.<span style="color: var(--theme-function)">CloudSocket</span>()
//Event listener that runs once the cloud socket connects
<span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">onOpen</span> = () =&gt; {
   //Code will go here later
}
//Connect the cloud socket
<span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">connect</span>()</div></div>
This is another core piece of code, and you'll need it in almost all javaScratch projects. It creates a CloudSocket instance, connects it, then runs code that interacts with the Scratch cloud API.

<br><br>It's worth noting of both of these code snippets is that connecting/initialising is done <i>after</i> defining an event function. This is because of the potential for the function to be defined after the API request resolves. Although the chance of this is incredibly low using javaScratch like this should be regarded as best practice.

<br><br>Now that you have a basic framework for communicating with Scratch, you can move on to creating a prompt for a server admin. To do this, you'll need to install the "readline" module, which is built into node - append the start of your program with this:
<div class="codeDemo" style="margin-bottom: 8px"><h3>Code</h3><div class="codeDemoContainer">//Load readline
<span style="color:var(--theme-def);">const</span> <span style="color: #000">readLine</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"readline"</span>)
</div></div>
With "readline" loaded, you can create a node prompt for the user; populate the <span class="codeSmall">onOpen</span> function with this code:
<div class="codeDemo" style="margin-bottom: 8px"><h3>Code</h3><div class="codeDemoContainer">//Create new readline interface
<span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">line</span> = <span style="color:#000;">readLine</span>.<span style="color:var(--theme-function);">createInterface</span>({
   <span style="color:var(--theme-string)">"input"</span>: <span style="color:#000">process</span>.<span style="color:#000">stdin</span>
   <span style="color:var(--theme-string)">"output"</span>: <span style="color:#000">process</span>.<span style="color:#000">stdout</span>
})
//Ask the admin for input
<span style="color:#000;">line</span>.<span style="color:var(--theme-function);">question</span>(<span style="color:var(--theme-string);">"Send to client: "</span>, <span style="color:#000;">text</span> => {
   //More code will go here later
   <span style="color:#000">line</span>.<span style="color:var(--theme-function)">close</span>()
})
</div></div>
This will create a prompt in the node console asking the admin what to send to the client. This code is temporary (like the client side), and will be changed later, but for now is necessary for programming the client side (which is the next section).

<br><br>Akin to the client side, the server also needs a function to convert numbers to text. This can be done using this code (put it with your other variable declarations):
<div class="codeDemo" style="margin-bottom: 8px"><h3>Code</h3><div class="codeDemoContainer">//Define encode function
<span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">encode</span> = (<span style="color:#000">toEncode</span>) => [...<span style="color: #000">toEncode</span>].<span style="color:var(--theme-function);">map</span>(<span style="color:#000">x</span> => <span style="color:#000">key</span>.<span style="color:var(--theme-function);">indexOf</span>(<span style="color:#000">x</span>.<span style="color:var(--theme-function);">toLowerCase</span>().<span style="color:var(--theme-function);">toString</span>()) + <span style="color:var(--theme-global);">10</span>).<span style="color:var(--theme-function);">join</span>("")
</div></div>
This function is analogous to the "E/D:Encode" function that you made for the client side. You'll also need this global constant be declared for the function to work:

<div class="codeDemo" style="margin-bottom: 8px"><h3>Code</h3><div class="codeDemoContainer">//Declare key array
<span style="color:var(--theme-def);">const</span> <span style="color: #000">key</span> = [<span style="color:var(--theme-string)">"a"</span>, <span style="color:var(--theme-string)">"b"</span>, <span style="color:var(--theme-string)">"c"</span>, <span style="color:var(--theme-string)">"d"</span>, <span style="color:var(--theme-string)">"e"</span>, <span style="color:var(--theme-string)">"f"</span>, <span style="color:var(--theme-string)">"g"</span>, <span style="color:var(--theme-string)">"h"</span>, <span style="color:var(--theme-string)">"i"</span>, <span style="color:var(--theme-string)">"j"</span>, <span style="color:var(--theme-string)">"k"</span>, <span style="color:var(--theme-string)">"l"</span>, <span style="color:var(--theme-string)">"m"</span>, <span style="color:var(--theme-string)">"n"</span>, <span style="color:var(--theme-string)">"o"</span>, <span style="color:var(--theme-string)">"p"</span>, <span style="color:var(--theme-string)">"q"</span>, <span style="color:var(--theme-string)">"r"</span>, <span style="color:var(--theme-string)">"s"</span>, <span style="color:var(--theme-string)">"t"</span>, <span style="color:var(--theme-string)">"u"</span>, <span style="color:var(--theme-string)">"v"</span>, <span style="color:var(--theme-string)">"w"</span>, <span style="color:var(--theme-string)">"x"</span>, <span style="color:var(--theme-string)">"y"</span>, <span style="color:var(--theme-string)">"z"</span>, <span style="color:var(--theme-string)">"1"</span>, <span style="color:var(--theme-string)">"2"</span>, <span style="color:var(--theme-string)">"3"</span>, <span style="color:var(--theme-string)">"4"</span>, <span style="color:var(--theme-string)">"5"</span>, <span style="color:var(--theme-string)">"6"</span>, <span style="color:var(--theme-string)">"7"</span>, <span style="color:var(--theme-string)">"8"</span>, <span style="color:var(--theme-string)">"9"</span>, <span style="color:var(--theme-string)">"0"</span>, <span style="color:var(--theme-string)">"-"</span>, <span style="color:var(--theme-string)">"_"</span>, <span style="color:var(--theme-string)">"/"</span>, <span style="color:var(--theme-string)">" "</span>]
</div></div>
Before you move on to the next section of code, go back to the Scratch project and create a new cloud variable. (This tutorial will refer to it as it "☁ From host").

<br><br>Now write this code before <span class="codeSmall">line.close()</span> in the callback for <span class="codeSmall">line.question()</span>
<div class="codeDemo" style="margin-bottom: 8px"><h3>Code</h3><div class="codeDemoContainer">//Get and handle input
<span style="color: #000">socket</span>.<span style="color:var(--theme-function);">map</span>(<span style="color:var(--theme-string);">"☁ From host"</span>, <span style="color:var(--theme-function);">encode</span>(<span style="color:#000;">text</span>))
</div></div>
This code will encode admin input and send it to the user.
</div>
<br>
<h3>Consolidating (1)</h3>
<div>
Your Scratch code should look like this:
<br><br><img src="https://github.com/ahypnoman/javaScratchDocumentation/blob/main/images/consolidate1.png?raw=true" alt="All code in Scratch project as of this point in the tutorial" style="max-width: min(100%, 600px);">
<br><br>And it should have these variables:
<br><br><table>
   <thead><tr>
     <th colspan="2">Variables</th>
   </tr>
   </thead>
   <tbody>
   <tr>
     <td>Visible?</td>
     <td>Name</td>
   </tr>
   <tr>
     <td>Yes</td>
     <td>☁ From host</td>
   </tr>
   <tr>
     <td>No</td>
     <td>☁ To host</td>
   </tr>
   <tr>
     <td>No</td>
     <td>E/D:Index</td>
   </tr>
   <tr>
     <td>No</td>
     <td>E/D:Output</td>
   </tr>
   </tbody>
   <thead><tr>
     <th colspan="2">Lists</th>
   </tr>
   </thead>
   <tbody>
   <tr>
     <td>No</td>
     <td>E/D:Key</td>
   </tr>
   </tbody>
</table>
<br> And your code should read as follows:
<div class="codeDemo" style="margin-bottom: 8px"><h3>Code</h3><div class="codeDemoContainer">//Load readline
<span style="color:var(--theme-def);">const</span> <span style="color: #000">readLine</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"readline"</span>)
//Load javaScratch and set up session
<span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>

<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"abc123"</span>, <span style="color:var(--theme-string)">"cba321"</span>)
//Declare key array
<span style="color:var(--theme-def);">const</span> <span style="color: #000">key</span> = [<span style="color:var(--theme-string)">"a"</span>, <span style="color:var(--theme-string)">"b"</span>, <span style="color:var(--theme-string)">"c"</span>, <span style="color:var(--theme-string)">"d"</span>, <span style="color:var(--theme-string)">"e"</span>, <span style="color:var(--theme-string)">"f"</span>, <span style="color:var(--theme-string)">"g"</span>, <span style="color:var(--theme-string)">"h"</span>, <span style="color:var(--theme-string)">"i"</span>, <span style="color:var(--theme-string)">"j"</span>, <span style="color:var(--theme-string)">"k"</span>, <span style="color:var(--theme-string)">"l"</span>, <span style="color:var(--theme-string)">"m"</span>, <span style="color:var(--theme-string)">"n"</span>, <span style="color:var(--theme-string)">"o"</span>, <span style="color:var(--theme-string)">"p"</span>, <span style="color:var(--theme-string)">"q"</span>, <span style="color:var(--theme-string)">"r"</span>, <span style="color:var(--theme-string)">"s"</span>, <span style="color:var(--theme-string)">"t"</span>, <span style="color:var(--theme-string)">"u"</span>, <span style="color:var(--theme-string)">"v"</span>, <span style="color:var(--theme-string)">"w"</span>, <span style="color:var(--theme-string)">"x"</span>, <span style="color:var(--theme-string)">"y"</span>, <span style="color:var(--theme-string)">"z"</span>, <span style="color:var(--theme-string)">"1"</span>, <span style="color:var(--theme-string)">"2"</span>, <span style="color:var(--theme-string)">"3"</span>, <span style="color:var(--theme-string)">"4"</span>, <span style="color:var(--theme-string)">"5"</span>, <span style="color:var(--theme-string)">"6"</span>, <span style="color:var(--theme-string)">"7"</span>, <span style="color:var(--theme-string)">"8"</span>, <span style="color:var(--theme-string)">"9"</span>, <span style="color:var(--theme-string)">"0"</span>, <span style="color:var(--theme-string)">"-"</span>, <span style="color:var(--theme-string)">"_"</span>, <span style="color:var(--theme-string)">"/"</span>, <span style="color:var(--theme-string)">" "</span>]
//Set up project variable
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">Project</span>(<span style="color:var(--theme-string)">"987654321"</span>)
//Define encode function
<span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">encode</span> = (<span style="color:#000">toEncode</span>) => [...<span style="color: #000">toEncode</span>].<span style="color:var(--theme-function);">map</span>(<span style="color:#000">x</span> => <span style="color:#000">key</span>.<span style="color:var(--theme-function);">indexOf</span>(<span style="color:#000">x</span>.<span style="color:var(--theme-function);">toLowerCase</span>().<span style="color:var(--theme-function);">toString</span>()) + <span style="color:var(--theme-global);">10</span>).<span style="color:var(--theme-function);">join</span>("")
//Event listener that runs once the session has been initialised
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () =&gt; {
   //Define cloud socket variable
   <span style="color:var(--theme-def);">const</span> <span style="color:#000;">socket</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">project</span>.<span style="color: var(--theme-function)">CloudSocket</span>()
   //Event listener that runs once the cloud socket connects
   <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">onOpen</span> = () =&gt; {
       //Create new readline interface
       <span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">line</span> = <span style="color:#000;">readLine</span>.<span style="color:var(--theme-function);">createInterface</span>({
           <span style="color:var(--theme-string)">"input"</span>: <span style="color:#000">process</span>.<span style="color:#000">stdin</span>
           <span style="color:var(--theme-string)">"output"</span>: <span style="color:#000">process</span>.<span style="color:#000">stdout</span>
       })
       //Ask the admin for input
       <span style="color:#000;">line</span>.<span style="color:var(--theme-function);">question</span>(<span style="color:var(--theme-string);">"Send to client: "</span>, <span style="color:#000;">text</span> => {
           //Get and handle input
           <span style="color: #000">socket</span>.<span style="color:var(--theme-function);">map</span>(<span style="color:var(--theme-string);">"☁ From host"</span>, <span style="color:var(--theme-function);">encode</span>(<span style="color:#000;">text</span>))
           <span style="color:#000">line</span>.<span style="color:var(--theme-function)">close</span>()
       })
   }
   //Connect the cloud socket
   <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">connect</span>()
}
//Initialise the session
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div>
Try running your code: input "abcd" when prompted, then check the Scratch project. You should see the "☁ From host" variable say "10111213"
</div>
<br>
<h3>Finishing the client side</h3>
<div>
With a functioning way to send messages back and forth between client and server, you can now start thinking about a protocol which the client and server will use to communicate. This tutorial will use the following protocol (columns will seperated by a forward slash):
<br><br><table>
   <thead><tr>
     <th colspan="3">Request protocol</th>
   </tr>
   </thead>
   <tbody>
   <tr>
     <td>Sent by</td>
     <td>Action</td>
     <td>Data</td>
   </tr>
   <tr>
     <td>abc123</td>
     <td>toggletag</td>
     <td>TAG NAME</td>
   </tr>
  <tr>
     <td>abc123</td>
     <td>gettags</td>
     <td>TARGET USER</td>
   </tr>
   </tbody>
   <thead><tr>
     <th colspan="3">Response protocol</th>
   </tr>
   </thead>
   <tbody>
   <tr>
     <td>Sent for</td>
     <td>Action</td>
     <td>Data</td>
   </tr>
   <tr>
     <td>abc123</td>
     <td>toggletag</td>
     <td>success | failure</td>
   </tr>
  <tr>
     <td>abc123</td>
     <td>gettags</td>
     <td>TAGS LIST</td>
   </tr>
   </tbody>
</table>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer">CLIENT: <span style="color:#000">abc123/gettags/griffpatch</span>
SERVER: <span style="color:#000">abc123/gettags/tag1/tag2/tag3</span></div></div>
With a protocol decided on, you can start to develop the client side.

<br><br>This section will cover making a basic UI in a low depth and will cover communicating with the server.

<br><br>First, remove the "when [space] key pressed" hat block in the project. Once done create a new global (all sprites) list (This tutorial will call it "Menu"). Expand it to fill almost all the screen, but leave a small gap at the bottom (This is so that the user can regain focus on the stage if lost). You will also need two more sprite-only lists (This tutorial will refer to them as "User:Possible tags" and "User:Tags active"). Next populate "User:Possible tags" with a list of desired tags. You can now hide the "☁ From host" variable.

<br><br>Before you move on to making the UI and client-server communication you'll need a custom block for decoding (This tutorial will refer to this custom block as "E/D:Decode"). Populate the custom block with this code:

<br><br><img src="https://github.com/ahypnoman/javaScratchDocumentation/blob/main/images/populateCustomBlock2.png?raw=true" alt="Populating custom block: E/D:Decode (To decode)" style="max-width: min(100%, 600px);">

<br><br>You'll also need a custom block for splitting text as it is not built into Scratch. As this custom block will only have one use (that is, splitting decoded cloud data), it will be specific in its function. Before writing this code you will need to create two new sprite only variables for this function (This tutorial will refer to them as "Interpreter:Output" and "Interpreter:Index"). The function will also need one list (This list will be referred to as "Cloud:Current data"). Make sure to toggle on "Run without screen refresh", add one parameter (This tutorial will refer to the parameter as "to split") and populate the custom block with this code (The custom block will be referred to as "Interpreter:Split"):

<br><br><img src="https://github.com/ahypnoman/javaScratchDocumentation/blob/main/images/populateCustomBlock3.png?raw=true" alt="Populating custom block: Interpreter:Split (To split)" style="max-width: min(100%, 600px);">
<br><br>This custom block iterates over the input and adds an item to a list for every substring before forward slash (or the end oth the string) in the string.

<br><br>You can now utilize the "Interpreter:Split" custom block by writing a script that updates cloud data for the rest of the project. You will need one new sprite-only variable (This tutorial will refer to it as "Cloud:Last message"):
<br><br><img src="https://github.com/ahypnoman/javaScratchDocumentation/blob/main/images/populateHat2.png?raw=true" alt='Populating hat block: "when green flag clicked"' style="max-width: min(100%, 600px);">
<br><br>This custom block will constantly check if the "☁ From host" variable has changed, and if so will update the "Cloud:Current data" list.

<br><br>The following is the main UI and communication script. As it is not particularly relevant however is required this tutorial will only explain how the communication works. For this code you will need a new sprite-only variable (this tutorial will refer to it as "Loading:Index"). (High resolution image: Zoom in to read clearly).
<br><br><div style="display: flex; flex-direction: column;"><img src="https://github.com/ahypnoman/javaScratchDocumentation/blob/main/images/UICode1.png/?raw=true" alt='Main code 1' style="max-width: min(100%, 600px); display: block"><img src="https://github.com/ahypnoman/javaScratchDocumentation/blob/main/images/UICode2.png?raw=true" alt='Main code 2' style="max-width: min(100%, 600px);"><img src="https://github.com/ahypnoman/javaScratchDocumentation/blob/main/images/UICode3.png?raw=true" alt='Main code 3' style="max-width: min(100%, 600px);"></div>
<br>Communication with the server is done through variations on this code:
<br><br><img src="https://github.com/ahypnoman/javaScratchDocumentation/blob/main/images/howToRequest.png?raw=true" alt="Demo of how to send and await messages over cloud variables" style="max-width: min(100%, 600px);">
<br><br>This script encodes and sends a request using the previously established protocol, then waits for a response intended for the user from the server (this code also relies on the first "when green flack clicked" script being active).

<br><br>With a working client side you can now finish the server side.
</div>
<br>
<h3>Finishing the server side</h3>
<div>
The client side is finished and can send requests to the server, however is functionless if the server cannot respond. This section will cover making a complementary server for the client.

<br><br>First, remove all code within <span class="codeSmall">socket.onOpen = () => {...}</span> block. You can also remove the require for "readline".

<br><br>The next step is creating code that is analogous to "E/D:Decode" and "Interpreter:Split" in the client side. A function equivalent to "Interpreter:Split" isn't necessary in the server - and will be omitted - however a decode function is still needed (this function will be referred to as "decode"):
<div class="codeDemo" style="margin-bottom: 8px"><h3>Code</h3><div class="codeDemoContainer">//Define encode function
<span style="color:var(--theme-def);">const</span> <span style="color:var(--theme-function)">decode</span> = (<span style="color:#000">toDecode</span>) => <span style="color:#000;">toDecode</span>.<span style="color:var(--theme-function);">match</span>(<span style="color:var(--theme-global);">/.{1,2}/g</span>).<span style="color:var(--theme-function);">map</span>(<span style="color:#000">x</span> => <span style="color:#000">key</span>[<span style="color:#000">x</span> - <span style="color:var(--theme-global);">10</span>]).<span style="color:var(--theme-function);">join</span>(<span style="color:var(--theme-string);">""</span>)
</div></div>
Now populate <span class="codeSmall">socket.onOpen = () => {...}</span> with this code:
<div class="codeDemo" style="margin-bottom: 8px"><h3>Code</h3><div class="codeDemoContainer">//Wait for connection
<span style="color:#000">console</span>.<span style="color: var(--theme-function)">log</span>(<span style="color:var(--theme-string)">"ready"</span>)
//Reset cloud variable and wait for a short time to prevent cloud requests overlapping
<span style="color:#000">socket</span>.<span style="color: var(--theme-function)">setVar</span>(<span style="color:var(--theme-string)">"☁ From host"</span>, <span style="color:var(--theme-string)">""</span>)
<span style="color:var(--theme-function)">setTimeout</span>(() =>
   //Wait for a message
   <span style="color:#000;">socket</span>.<span style="color:var(--theme-function)">onMessage</span> = () => {
       //Separate request into multiple variables
       <span style="color:var(--theme-def);">const</span> <span style="color:#000">rawMessage</span> = <span style="color:var(--theme-function)">decode</span>(<span style="color:#000">socket</span>.<span style="color:#000">variables</span>[<span style="color:var(--theme-string)">"☁ To host"</span>]).<span style="color:var(--theme-function);">split</span>(<span style="color:var(--theme-string);">"/"</span>)
       <span style="color:var(--theme-def);">const</span> <span style="color:#000">user</span> = <span style="color:#000">rawMessage</span>[<span style="color:var(--theme-global)">0</span>]
       <span style="color:var(--theme-def);">const</span> <span style="color:#000">request</span> = <span style="color:#000">rawMessage</span>[<span style="color:var(--theme-global)">1</span>]
       <span style="color:var(--theme-def);">const</span> <span style="color:#000">body</span> = <span style="color:#000">rawMessage</span>[<span style="color:var(--theme-global)">2</span>]
       //Run a switch to determine how to handle the request
       <span style="color:var(--theme-def);">switch</span> (<span style="color:#000">request</span>) {
           <span style="color:var(--theme-def);">case</span> <span style="color:var(--theme-string);">"gettags"</span>:
               //Handle gettags request
               <span style="color:var(--theme-def);">if</span> (<span style="color:#000">userDataCache</span>[<span style="color:#000">body</span>]) <span style="color:#000">socket</span>.<span style="color: var(--theme-function)">setVar</span>(<span style="color:var(--theme-string)">"☁ From host"</span>, <span style="color:var(--theme-function)">encode</span>(<span style="color:#000">user</span> + <span style="color:var(--theme-string)">"/gettags/"</span> + <span style="color:#000">userDataCache</span>[<span style="color:#000">body</span>].<span style="color:#000">tags</span>.<span style="color:var(--theme-function)">join</span>(<span style="color:var(--theme-string)">"/"</span>)))
               <span style="color:var(--theme-def);">else</span> <span style="color:#000">socket</span>.<span style="color: var(--theme-function)">setVar</span>(<span style="color:var(--theme-string)">"☁ From host"</span>, <span style="color:var(--theme-function)">encode</span>(<span style="color:#000">user</span> + <span style="color:var(--theme-string)">"/gettags/"</span> + <span style="color:#000">body</span> + <span style="color:var(--theme-string)">" has not selected any tags"</span>))
               <span style="color:var(--theme-function)">setTimeout</span>(() => <span style="color:#000">socket</span>.<span style="color: var(--theme-function)">setVar</span>(<span style="color:var(--theme-string)">"☁ From host"</span>, <span style="color:var(--theme-string)">""</span>), <span style="color:var(--theme-global)">100</span>)
               <span style="color:var(--theme-def);">break</span>
           <span style="color:var(--theme-def);">case</span> <span style="color:var(--theme-string);">"toggletag"</span>:
               //Handle toggletag request
               <span style="color:var(--theme-def);">if</span> (!<span style="color:#000">userDataCache</span>[<span style="color:#000">user</span>]) <span style="color:#000">userDataCache</span>[<span style="color:#000">user</span>] = {<span style="color:var(--theme-string)">"tags"</span>: [<span style="color:#000">body</span>]}
               <span style="color:var(--theme-def);">else</span> <span style="color:var(--theme-def);">if</span> (<span style="color:#000">userDataCache</span>[<span style="color:#000">user</span>].<span style="color:#000">tags</span>.<span style="color:var(--theme-function)">includes</span>(<span style="color:#000">body</span>)) <span style="color:#000">userDataCache</span>[<span style="color:#000">user</span>].<span style="color:#000">tags</span> = <span style="color:#000">userDataCache</span>[<span style="color:#000">user</span>].<span style="color:#000">tags</span>.<span style="color:var(--theme-function)">filter</span>(<span style="color:#000">x</span> => <span style="color:#000">x</span> !== <span style="color:#000">body</span>)
               <span style="color:var(--theme-def);">else</span> <span style="color:#000">userDataCache</span>[<span style="color:#000">user</span>].<span style="color:#000">tags</span>.<span style="color:var(--theme-function)">push</span>(<span style="color:#000">body</span>)
               <span style="color:#000">socket</span>.<span style="color: var(--theme-function)">setVar</span>(<span style="color:var(--theme-string)">"☁ From host"</span>, <span style="color:var(--theme-function)">encode</span>(<span style="color:#000">user</span> + <span style="color:var(--theme-string)">"/toggletag/success"</span>))
               <span style="color:var(--theme-function)">setTimeout</span>(() => <span style="color:#000">socket</span>.<span style="color: var(--theme-function)">setVar</span>(<span style="color:var(--theme-string)">"☁ From host"</span>, <span style="color:var(--theme-string)">""</span>), <span style="color:var(--theme-global)">100</span>)
               <span style="color:var(--theme-def);">break</span>
       }
   }, <span style="color:var(--theme-global)">100</span>)
</div></div>
This code is the counterpart to the client communication code; it establishes a connection then waits for and handles messages using <span class="codeSmall">session.onMessage</span> and a switch statement with a case for every request type.

<br><br>This code won't work yet as the user data variable has not been declared. With your other global variable declarations define it like this (This variable will be referred to as "userDataCache"):
<div class="codeDemo" style="margin-bottom: 8px"><h3>Code</h3><div class="codeDemoContainer">//Declare user data cache
<span style="color:var(--theme-def);">const</span> <span style="color: #000">userDataCache</span> = &#123;}
</div></div>
You can now test your code, and it should work.
</div>
<br>
<h3>Consolidating (2)</h3><div>
Your Scratch code should contain these snippets:
<br><br><img src="https://github.com/ahypnoman/javaScratchDocumentation/blob/main/images/populateCustomBlock1.png?raw=true" alt="Encode custom block" style="max-width: min(100%, 600px);">
<br><br><img src="https://github.com/ahypnoman/javaScratchDocumentation/blob/main/images/populateCustomBlock2.png?raw=true" alt="Decode custom block" style="max-width: min(100%, 600px);">
<br><br><img src="https://github.com/ahypnoman/javaScratchDocumentation/blob/main/images/populateCustomBlock3.png?raw=true" alt="Interpret custom block" style="max-width: min(100%, 600px);">
<br><br><img src="https://github.com/ahypnoman/javaScratchDocumentation/blob/main/images/populateHat2.png?raw=true" alt='Secondary code' style="max-width: min(100%, 600px);">
<br><br><div style="display: flex; flex-direction: column;"><img src="https://github.com/ahypnoman/javaScratchDocumentation/blob/main/images/UICode1.png/?raw=true" alt='Main code 1' style="max-width: min(100%, 600px); display: block"><img src="https://github.com/ahypnoman/javaScratchDocumentation/blob/main/images/UICode2.png?raw=true" alt='Main code 2' style="max-width: min(100%, 600px);"><img src="https://github.com/ahypnoman/javaScratchDocumentation/blob/main/images/UICode3.png?raw=true" alt='Main code 3' style="max-width: min(100%, 600px);"></div>
<br><br>And it should have these variables:
<br><br><table>
   <thead><tr>
     <th colspan="2">Variables</th>
   </tr>
   </thead>
   <tbody>
   <tr>
     <td>Visible?</td>
     <td>Name</td>
   </tr>
   <tr>
     <td>No</td>
     <td>☁ From host</td>
   </tr>
   <tr>
     <td>No</td>
     <td>☁ To host</td>
   </tr>
   <tr>
     <td>No</td>
     <td>Cloud:Last message</td>
   </tr>
   <tr>
     <td>No</td>
     <td>E/D:Index</td>
   </tr>
   <tr>
     <td>No</td>
     <td>E/D:Output</td>
   </tr>
   <tr>
     <td>No</td>
     <td>Interpreter:Index</td>
   </tr>
   <tr>
     <td>No</td>
     <td>Interpreter:Output</td>
   </tr>
   <tr>
     <td>No</td>
     <td>Loading:Index</td>
   </tr>
   </tbody>
   <thead><tr>
     <th colspan="2">Lists</th>
   </tr>
   </thead>
   <tbody>
   <tr>
     <td>No</td>
     <td>Cloud:Current data</td>
   </tr>
   <tr>
     <td>No</td>
     <td>E/D:Key</td>
   </tr>
   <tr>
     <td>Yes</td>
     <td>Menu</td>
   </tr>
   <tr>
     <td>No</td>
     <td>User:Possible tags</td>
   </tr>
   <tr>
     <td>No</td>
     <td>User:Tags active</td>
   </tr>
   </tbody>
</table>

<br>Your server code should read as follows:
<div class="codeDemo" style="margin-bottom: 8px"><h3>Code</h3><div class="codeDemoContainer">//Load readline
<span style="color:var(--theme-def);">const</span> <span style="color: #000">readLine</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"readline"</span>)
//Load javaScratch and set up session
<span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>

<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"abc123"</span>, <span style="color:var(--theme-string)">"cba321"</span>)
//Set up project variable
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">Project</span>(<span style="color:var(--theme-string)">"987654321"</span>)
//Declare key array
<span style="color:var(--theme-def);">const</span> <span style="color: #000">key</span> = [<span style="color:var(--theme-string)">"a"</span>, <span style="color:var(--theme-string)">"b"</span>, <span style="color:var(--theme-string)">"c"</span>, <span style="color:var(--theme-string)">"d"</span>, <span style="color:var(--theme-string)">"e"</span>, <span style="color:var(--theme-string)">"f"</span>, <span style="color:var(--theme-string)">"g"</span>, <span style="color:var(--theme-string)">"h"</span>, <span style="color:var(--theme-string)">"i"</span>, <span style="color:var(--theme-string)">"j"</span>, <span style="color:var(--theme-string)">"k"</span>, <span style="color:var(--theme-string)">"l"</span>, <span style="color:var(--theme-string)">"m"</span>, <span style="color:var(--theme-string)">"n"</span>, <span style="color:var(--theme-string)">"o"</span>, <span style="color:var(--theme-string)">"p"</span>, <span style="color:var(--theme-string)">"q"</span>, <span style="color:var(--theme-string)">"r"</span>, <span style="color:var(--theme-string)">"s"</span>, <span style="color:var(--theme-string)">"t"</span>, <span style="color:var(--theme-string)">"u"</span>, <span style="color:var(--theme-string)">"v"</span>, <span style="color:var(--theme-string)">"w"</span>, <span style="color:var(--theme-string)">"x"</span>, <span style="color:var(--theme-string)">"y"</span>, <span style="color:var(--theme-string)">"z"</span>, <span style="color:var(--theme-string)">"1"</span>, <span style="color:var(--theme-string)">"2"</span>, <span style="color:var(--theme-string)">"3"</span>, <span style="color:var(--theme-string)">"4"</span>, <span style="color:var(--theme-string)">"5"</span>, <span style="color:var(--theme-string)">"6"</span>, <span style="color:var(--theme-string)">"7"</span>, <span style="color:var(--theme-string)">"8"</span>, <span style="color:var(--theme-string)">"9"</span>, <span style="color:var(--theme-string)">"0"</span>, <span style="color:var(--theme-string)">"-"</span>, <span style="color:var(--theme-string)">"_"</span>, <span style="color:var(--theme-string)">"/"</span>, <span style="color:var(--theme-string)">" "</span>]
//Declare user data cache
<span style="color:var(--theme-def);">const</span> <span style="color: #000">userDataCache</span> = &#123;}
//Define encode function
<span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">encode</span> = (<span style="color:#000">toEncode</span>) => [...<span style="color: #000">toEncode</span>].<span style="color:var(--theme-function);">map</span>(<span style="color:#000">x</span> => <span style="color:#000">key</span>.<span style="color:var(--theme-function);">indexOf</span>(<span style="color:#000">x</span>.<span style="color:var(--theme-function);">toLowerCase</span>().<span style="color:var(--theme-function);">toString</span>()) + <span style="color:var(--theme-global);">10</span>).<span style="color:var(--theme-function);">join</span>("")
//Define decode function
<span style="color:var(--theme-def);">const</span> <span style="color:var(--theme-function)">decode</span> = (<span style="color:#000">toDecode</span>) => <span style="color:#000;">toDecode</span>.<span style="color:var(--theme-function);">match</span>(<span style="color:var(--theme-global);">/.{1,2}/g</span>).<span style="color:var(--theme-function);">map</span>(<span style="color:#000">x</span> => <span style="color:#000">key</span>[<span style="color:#000">x</span> - <span style="color:var(--theme-global);">10</span>]).<span style="color:var(--theme-function);">join</span>(<span style="color:var(--theme-string);">""</span>)
//Event listener that runs once the session has been initialised
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () =&gt; {
   //Define cloud socket variable
   <span style="color:var(--theme-def);">const</span> <span style="color:#000;">socket</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">project</span>.<span style="color: var(--theme-function)">CloudSocket</span>()
   //Event listener that runs once the cloud socket connects
   <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">onOpen</span> = () =&gt; {
       //Wait for connection
       <span style="color:#000">console</span>.<span style="color: var(--theme-function)">log</span>(<span style="color:var(--theme-string)">"ready"</span>)
       //Reset cloud variable and wait for a short time to prevent cloud requests overlapping
       <span style="color:#000">socket</span>.<span style="color: var(--theme-function)">setVar</span>(<span style="color:var(--theme-string)">"☁ From host"</span>, <span style="color:var(--theme-string)">""</span>)
       <span style="color:var(--theme-function)">setTimeout</span>(() =>
           //Wait for a message
           <span style="color:#000;">socket</span>.<span style="color:var(--theme-function)">onMessage</span> = () => {
               //Separate request into multiple variables
               <span style="color:var(--theme-def);">const</span> <span style="color:#000">rawMessage</span> = <span style="color:var(--theme-function)">decode</span>(<span style="color:#000">socket</span>.<span style="color:#000">variables</span>[<span style="color:var(--theme-string)">"☁ To host"</span>]).<span style="color:var(--theme-function);">split</span>(<span style="color:var(--theme-string);">"/"</span>)
               <span style="color:var(--theme-def);">const</span> <span style="color:#000">user</span> = <span style="color:#000">rawMessage</span>[<span style="color:var(--theme-global)">0</span>]
               <span style="color:var(--theme-def);">const</span> <span style="color:#000">request</span> = <span style="color:#000">rawMessage</span>[<span style="color:var(--theme-global)">1</span>]
               <span style="color:var(--theme-def);">const</span> <span style="color:#000">body</span> = <span style="color:#000">rawMessage</span>[<span style="color:var(--theme-global)">2</span>]
               //Run a switch to determine how to handle the request
               <span style="color:var(--theme-def);">switch</span> (<span style="color:#000">request</span>) {
                   <span style="color:var(--theme-def);">case</span> <span style="color:var(--theme-string);">"gettags"</span>:
                       //Handle gettags request
                       <span style="color:var(--theme-def);">if</span> (<span style="color:#000">userDataCache</span>[<span style="color:#000">body</span>]) <span style="color:#000">socket</span>.<span style="color: var(--theme-function)">setVar</span>(<span style="color:var(--theme-string)">"☁ From host"</span>, <span style="color:var(--theme-function)">encode</span>(<span style="color:#000">user</span> + <span style="color:var(--theme-string)">"/gettags/"</span> + <span style="color:#000">userDataCache</span>[<span style="color:#000">body</span>].<span style="color:#000">tags</span>.<span style="color:var(--theme-function)">join</span>(<span style="color:var(--theme-string)">"/"</span>)))
                       <span style="color:var(--theme-def);">else</span> <span style="color:#000">socket</span>.<span style="color: var(--theme-function)">setVar</span>(<span style="color:var(--theme-string)">"☁ From host"</span>, <span style="color:var(--theme-function)">encode</span>(<span style="color:#000">user</span> + <span style="color:var(--theme-string)">"/gettags/"</span> + <span style="color:#000">body</span> + <span style="color:var(--theme-string)">" has not selected any tags"</span>))
                       <span style="color:var(--theme-function)">setTimeout</span>(() => <span style="color:#000">socket</span>.<span style="color: var(--theme-function)">setVar</span>(<span style="color:var(--theme-string)">"☁ From host"</span>, <span style="color:var(--theme-string)">""</span>), <span style="color:var(--theme-global)">100</span>)
                       <span style="color:var(--theme-def);">break</span>
                   <span style="color:var(--theme-def);">case</span> <span style="color:var(--theme-string);">"toggletag"</span>:
                       //Handle toggletag request
                       <span style="color:var(--theme-def);">if</span> (!<span style="color:#000">userDataCache</span>[<span style="color:#000">user</span>]) <span style="color:#000">userDataCache</span>[<span style="color:#000">user</span>] = {<span style="color:var(--theme-string)">"tags"</span>: [<span style="color:#000">body</span>]}
                       <span style="color:var(--theme-def);">else</span> <span style="color:var(--theme-def);">if</span> (<span style="color:#000">userDataCache</span>[<span style="color:#000">user</span>].<span style="color:#000">tags</span>.<span style="color:var(--theme-function)">includes</span>(<span style="color:#000">body</span>)) <span style="color:#000">userDataCache</span>[<span style="color:#000">user</span>].<span style="color:#000">tags</span> = <span style="color:#000">userDataCache</span>[<span style="color:#000">user</span>].<span style="color:#000">tags</span>.<span style="color:var(--theme-function)">filter</span>(<span style="color:#000">x</span> => <span style="color:#000">x</span> !== <span style="color:#000">body</span>)
                       <span style="color:var(--theme-def);">else</span> <span style="color:#000">userDataCache</span>[<span style="color:#000">user</span>].<span style="color:#000">tags</span>.<span style="color:var(--theme-function)">push</span>(<span style="color:#000">body</span>)
                       <span style="color:#000">socket</span>.<span style="color: var(--theme-function)">setVar</span>(<span style="color:var(--theme-string)">"☁ From host"</span>, <span style="color:var(--theme-function)">encode</span>(<span style="color:#000">user</span> + <span style="color:var(--theme-string)">"/toggletag/success"</span>))
                       <span style="color:var(--theme-function)">setTimeout</span>(() => <span style="color:#000">socket</span>.<span style="color: var(--theme-function)">setVar</span>(<span style="color:var(--theme-string)">"☁ From host"</span>, <span style="color:var(--theme-string)">""</span>), <span style="color:var(--theme-global)">100</span>)
                       <span style="color:var(--theme-def);">break</span>
               }
           }, <span style="color:var(--theme-global)">100</span>)
   }
   //Connect the cloud socket
   <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">connect</span>()
}
//Initialise the session
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div>
You can now connect the server to a database if you wish, however this tutorial will not cover how.

<br><br>You have finished this tutorial and can now use the server and project. If you wish to keep the server running you will need to look into hosting options yourself.
</div>
<br>
<h3>Personal note</h3>
<br>I would include in this tutorial how to validate requests to make sure that the user is who they say they are, however that requires access to the cloud history API which as of writing is down, so apologies if when you are reading this the cloud logs API is up.
<br><br><a href="https://scratch.mit.edu/projects/907563325/">Demo project</a>
`
       },
    "Data structures": {
        "visible": true,
        "isTitle": true
    },
    "variablePresets": {
        "visible": true,
        "content": `<div>Object that determines preset variables to avoid needing to wait for the handshake to complete before getting information.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer">{
    <span style="color:var(--theme-string)">"VARIABLE NAME"</span>: <span style="color:var(--theme-global)">VALUE</span>
}</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:var(--theme-def);">const</span> <span style="color: #000">socket</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">CloudSocket</span>({<span style="color:var(--theme-string)">"☁ Cloud variable"</span>: <span style="color:var(--theme-global)">1</span>})
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div>`,
    },
    "replyOptions": {
        "visible": true,
        "content": `<div>Object that determines options for replying when posting a comment, used in both the Studio() and Project() functions.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer">{
    <span style="color:var(--theme-string);">"parent"</span>: <span style="color:var(--theme-string);">"PARENT COMMENT ID"</span>,
    <span style="color:var(--theme-string);">"commentee"</span>: <span style="color:var(--theme-string);">"PARENT COMMENT AUTHOR ID"</span>
}
</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">postComment</span>(<span style="color:var(--theme-string);">"Comment content"</span>, {<span style="color:var(--theme-string);">"parent"</span>: <span style="color:var(--theme-string);">"PARENT COMMENT ID"</span>,<span style="color:var(--theme-string);">"commentee"</span>: <span style="color:var(--theme-string);">"PARENT COMMENT AUTHOR ID"</span>})
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "Methods and functions": {
        "visible": true,
        "isTitle": true
    },
    "javaScratch docs": {
        "visible": false,
        "hideFromFilter": true,
        "content": `<div><div>Welcome to the docs - all of javaScratch's functions are documented here. Use the sidebar on the right to navigate.
        </div><br>
        <h3>Please note while reading</h3>
        <ul><li>Almost all functions output a promise - If that is the case the output field is the result after <span class="codeSmall">someFunction().then(x=>x.text().then(console.log))</span> or after <span class="codeSmall">someFunction().then(x=>x.text().then(y=>console.log(session.xmlParser.someParser()))</span>.</li>
        <li>Almost all input is a string unless specified otherwise (make sure to check the code demo).</li>
        <li>Documentation is written in British English, code in American: "Initialise" and "initialize()" is not a mistake.</li>
        <li>Some APIs have been omitted, such as views, as it can be abused because there is no limit to how many times a user can view a project.</li></ul>
        <br>
        <h3>Notable pages</h3>
        <ul>
        <li><span class="codeSmall"><button class="docsLink" data-sidebarId="Session()">Session()</button></span> - Session constructor</li>
        <li><span class="codeSmall"><button class="docsLink" data-sidebarId="initialize()">initialize()</button></span> - function to log in to Scratch</li>
        <li><span class="codeSmall"><button class="docsLink" data-sidebarId="onReady()">onReady()</button></span> - writable listener function for detecting successful initialisation</li>
        <li><span class="codeSmall"><button class="docsLink" data-sidebarId="CloudSocket()">CloudSocket()</button></span> - cloud socket constructor function</li>
        <li><span class="codeSmall"><button class="docsLink" data-sidebarId="Tutorials:Basic cloud storage tutorial">Basic cloud storage tutorial</button></span> - tutorial/walkthrough</li>
        </ul></div>`
    },
    "Unknown": {
        "visible": false,
        "hideFromFilter": true,
        "content": "<div>The structure of this value is unknown</div>"
    },
    "Session()": {
        "visible": true,
        "content": `<span class="docsBanner" style="background: var(--warn-banner)">"username" parameter is case-sensitive</span><div>Session constructor function for interacting with the Scratch API.
                    <div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">Project</span>(<span style="color:#000;">projectId</span>)</div></div>
                    <div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)</div></div></div><h3 style="text-shadow: none; margin-top: 8px">Properties:</h3>
                    <div><h3 style="text-shadow: none; font-size: 17px"><span class="codeSmall">xmlParser</span></h3><br>
                    Value is a collection of methods for parsing XML API output.
                    <div class="codeDemo"><h3>Format</h3><div class="codeDemoContainer" style="color:#bfbfbf;"><button class="docsLink" data-sidebarId="xmlParser">Session: xmlParser</button></div></div>
                    </div>
                    <div style="padding-top: 8px"><h3 style="text-shadow: none; font-size: 17px"><span class="codeSmall">frontPage</span></h3><br>
                    Value is a collection of methods for getting non-personal data related to the front page.
                    <div class="codeDemo"><h3>Format</h3><div class="codeDemoContainer" style="color:#bfbfbf;"><button class="docsLink" data-sidebarId="frontPage">Session: frontPage</button></div></div>
                    </div>`,
        "children": [
            "xmlParser",
            "frontPage",
            "onReady()",
            "onFail()",
            "initialize()",
            "end()",
            "Project()",
            "Studio()",
            "User()",
            "Self()"
        ]
    },
    "xmlParser": {
        "visible": false,
        "content": `<div>Collection of XML parsers for parsing data from the <span class="codeSmall">site-api</span> API. It handles the output of function found in the <span class="codeSmall"><button class="docsLink" data-sidebarId="xmlProfile">xmlProfile</button></span> collection.</div>`,
        "children": [
            "profileComments()",
            "profileActivity()",
            "profileFeatured()",
            "collections()"
        ]
    },
    "profileComments()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><div>Function that parses a valid the response from the <span class="codeSmall">site-api</span> comments API found on profiles.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">profileComments</span>(<span style="color:#000;">data</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:var(--theme-def);">const</span> <span style="color:#000;">self</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">Self</span>()
    <span style="color:#000;">self</span>.<span style="color:#000;">xmlProfile</span>.<span style="color: var(--theme-function)">getComments</span>(<span style="color:var(--theme-string);">"1"</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">y</span>=><span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:#000;">session</span>.<span style="color:#000;">xmlParser</span>.<span style="color:var(--theme-function);">profileComments</span>(<span style="color:#000;">y</span>))))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()
</div><div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-string);">"COMMENT ID"</span>,
        <span style="color:var(--theme-string);">"authorString"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"content"</span>: <span style="color:var(--theme-string);">"CONTENT"</span>,
        <span style="color:var(--theme-string);">"replies"</span>: [
            {
                <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-string);">"COMMENT ID"</span>,
                <span style="color:var(--theme-string);">"authorString"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
                <span style="color:var(--theme-string);">"content"</span>: <span style="color:var(--theme-string);">"CONTENT"</span>
            }
        ]
    }
]
</div></div></div>`
    },
    "profileActivity()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><div>Function that parses a valid the response from the <span class="codeSmall">site-api</span> profile activity API found on profiles.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">profileActivity</span>(<span style="color:#000;">data</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:var(--theme-def);">const</span> <span style="color:#000;">self</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">Self</span>()
    <span style="color:#000;">self</span>.<span style="color:#000;">xmlProfile</span>.<span style="color: var(--theme-function)">getActivity</span>(<span style="color:var(--theme-string);">"1"</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">y</span>=><span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:#000;">session</span>.<span style="color:#000;">xmlParser</span>.<span style="color:var(--theme-function);">profileActivity</span>(<span style="color:#000;">y</span>))))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()
</div><div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"action"</span>: <span style="color:var(--theme-string);">"ACTION"</span>,
        <span style="color:var(--theme-string);">"actor"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"time"</span>: <span style="color:var(--theme-string);">"TIME SINCE"</span>,
        <span style="color:var(--theme-string);">"targets"</span>: [
            <span style="color:var(--theme-global);">...[TARGETS]</span>
        ]
    }
]
</div></div></div>`
    },
    "profileFeatured()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><div>Function that parses a valid profile page and extracts the featured project.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">profileFeatured</span>(<span style="color:#000;">data</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:var(--theme-def);">const</span> <span style="color:#000;">self</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">Self</span>()
    <span style="color:#000;">self</span>.<span style="color:#000;">xmlProfile</span>.<span style="color: var(--theme-function)">getProfile</span>().<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">y</span>=><span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:#000;">session</span>.<span style="color:#000;">xmlParser</span>.<span style="color:var(--theme-function);">profileFeatured</span>(<span style="color:#000;">y</span>))))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()
</div><div class="codeDemoOutput">{
    <span style="color:var(--theme-string);">"id"</span>:<span style="color:var(--theme-string);">"879395426"</span>,
    <span style="color:var(--theme-string);">"label"</span>:<span style="color:var(--theme-string);">"LABEL"</span>
}
</div></div></div>`
    },
    "collections()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><div>Function that parses a valid collections page (e.g. shared projects page, followers page, studios page) and returns an array consisting of ids/usernames.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">collections</span>(<span style="color:#000;">data</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:var(--theme-def);">const</span> <span style="color:#000;">self</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">Self</span>()
    <span style="color:#000;">self</span>.<span style="color:#000;">xmlProfile</span>.<span style="color: var(--theme-function)">getFollowedUsers</span>(<span style="color:var(--theme-string);">"1"</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">y</span>=><span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:#000;">session</span>.<span style="color:#000;">xmlParser</span>.<span style="color:var(--theme-function);">collections</span>(<span style="color:#000;">y</span>))))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()
</div><div class="codeDemoOutput">[
    <span style="color:var(--theme-string);">'/users/USERNAME/'</span>
]
</div></div></div>`
    },
    "frontPage": {
        "visible": false,
        "content": `<div>Collection of functions for getting information found on the front page that is accessible to everyone (this excludes things such as the "Projects Loved by Scratchers I'm Following" and "What's Happening?" sections of the front page).</div>`,
        "children": [
            "getFrontpaged()",
            "getNews()"
        ]
    },
    "getFrontpaged()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span>
<div>Function that gets information about the front page, including newest projects, top remixed, Scratch Design Studio, curated projects, featured studios, top loved, and featured projects.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getFrontpaged</span>()</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">session</span>.<span style="color:#000;">frontPage</span>.<span style="color: var(--theme-function)">getFrontpaged</span>().<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()
</div><div class="codeDemoOutput">{
        <span style="color:var(--theme-string);">"community_newest_projects"</span>:
        [
            {
                <span style="color:var(--theme-string);">"thumbnail_url"</span>: <span style="color:var(--theme-string);">"//uploads.scratch.mit.edu/projects/thumbnails/PROJECT ID.png"</span>,
                <span style="color:var(--theme-string);">"title"</span>: <span style="color:var(--theme-string);">TITLE</span>,
                <span style="color:var(--theme-string);">"creator"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
                <span style="color:var(--theme-string);">"type"</span>: <span style="color:var(--theme-string);">"project"</span>,
                <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">PROJECT ID</span>,
                <span style="color:var(--theme-string);">"love_count"</span>: <span style="color:var(--theme-global);">LOVE COUNT</span>
            }
        ],
            <span style="color:var(--theme-string);">"community_most_remixed_projects"</span>:
        [
            {
                <span style="color:var(--theme-string);">"thumbnail_url"</span>: <span style="color:var(--theme-string);">"//uploads.scratch.mit.edu/projects/thumbnails/PROJECT ID.png"</span>,
                <span style="color:var(--theme-string);">"title"</span>: <span style="color:var(--theme-string);">TITLE</span>,
                <span style="color:var(--theme-string);">"creator"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
                <span style="color:var(--theme-string);">"type"</span>: <span style="color:var(--theme-string);">"project"</span>,
                <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">PROJECT ID</span>,
                <span style="color:var(--theme-string);">"love_count"</span>: <span style="color:var(--theme-global);">LOVE COUNT</span>
            }
        ],
            <span style="color:var(--theme-string);">"scratch_design_studio"</span>:
        [
            {
                <span style="color:var(--theme-string);">"thumbnail_url"</span>: <span style="color:var(--theme-string);">"//uploads.scratch.mit.edu/projects/thumbnails/PROJECT ID.png"</span>,
                <span style="color:var(--theme-string);">"title"</span>: <span style="color:var(--theme-string);">TITLE</span>,
                <span style="color:var(--theme-string);">"creator"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
                <span style="color:var(--theme-string);">"type"</span>: <span style="color:var(--theme-string);">"project"</span>,
                <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">PROJECT ID</span>,
                <span style="color:var(--theme-string);">"love_count"</span>: <span style="color:var(--theme-global);">LOVE COUNT</span>
            }
        ],
            <span style="color:var(--theme-string);">"curator_top_projects"</span>:
        [
            {
                <span style="color:var(--theme-string);">"thumbnail_url"</span>: <span style="color:var(--theme-string);">"//uploads.scratch.mit.edu/projects/thumbnails/PROJECT ID.png"</span>,
                <span style="color:var(--theme-string);">"title"</span>: <span style="color:var(--theme-string);">TITLE</span>,
                <span style="color:var(--theme-string);">"creator"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
                <span style="color:var(--theme-string);">"type"</span>: <span style="color:var(--theme-string);">"project"</span>,
                <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">PROJECT ID</span>,
                <span style="color:var(--theme-string);">"love_count"</span>: <span style="color:var(--theme-global);">LOVE COUNT</span>
            }
        ],
            <span style="color:var(--theme-string);">"community_featured_studios"</span>:
        [
            {
                <span style="color:var(--theme-string);">"thumbnail_url"</span>: <span style="color:var(--theme-string);">"//uploads.scratch.mit.edu/projects/thumbnails/STUDIO ID.png"</span>,
                <span style="color:var(--theme-string);">"type"</span>: <span style="color:var(--theme-string);">"gallery"</span>,
                <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">STUDIO ID</span>,
                <span style="color:var(--theme-string);">"title"</span>: <span style="color:var(--theme-string);">"TITLE"</span>,
            }
        ],
            <span style="color:var(--theme-string);">"community_most_loved_projects"</span>:
        [
            {
                <span style="color:var(--theme-string);">"thumbnail_url"</span>: <span style="color:var(--theme-string);">"//uploads.scratch.mit.edu/projects/thumbnails/PROJECT ID.png"</span>,
                <span style="color:var(--theme-string);">"title"</span>: <span style="color:var(--theme-string);">TITLE</span>,
                <span style="color:var(--theme-string);">"creator"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
                <span style="color:var(--theme-string);">"type"</span>: <span style="color:var(--theme-string);">"project"</span>,
                <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">PROJECT ID</span>,
                <span style="color:var(--theme-string);">"love_count"</span>: <span style="color:var(--theme-global);">LOVE COUNT</span>
            }
        ],
            <span style="color:var(--theme-string);">"community_featured_projects"</span>:
        [
            {
                <span style="color:var(--theme-string);">"thumbnail_url"</span>: <span style="color:var(--theme-string);">"//uploads.scratch.mit.edu/projects/thumbnails/PROJECT ID.png"</span>,
                <span style="color:var(--theme-string);">"title"</span>: <span style="color:var(--theme-string);">"TITLE"</span>,
                <span style="color:var(--theme-string);">"creator"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
                <span style="color:var(--theme-string);">"type"</span>: <span style="color:var(--theme-string);">"project"</span>,
                <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">PROJECT ID</span>,
                <span style="color:var(--theme-string);">"love_count"</span>: <span style="color:var(--theme-global);">LOVE COUNT</span>
            }
        ]
    }
</div></div></div>`
    },
    "getNews()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span>
<div>Function that gets the content of the "Scratch News" panel on the front page.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getNews</span>(<span style="color:#000;">offset</span>, <span style="color:#000;">limit</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">session</span>.<span style="color:#000;">frontPage</span>.<span style="color: var(--theme-function)">getNews</span>(<span style="color: var(--theme-global)">0</span>, <span style="color: var(--theme-global)">1</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color: var(--theme-global)">NEWS ID</span>,
        <span style="color:var(--theme-string);">"stamp"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"headline"</span>: <span style="color:var(--theme-string);">"TITLE"</span>,
        <span style="color:var(--theme-string);">"url"</span>: <span style="color:var(--theme-string);">"URL"</span>,
        <span style="color:var(--theme-string);">"image"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
        <span style="color:var(--theme-string);">"copy"</span>: <span style="color:var(--theme-string);">"CONTENT"</span>
    }
]</div></div>`
    },
    "onReady()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span>
<div>The callback function for successful initialisation.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">onReady</span>()</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    //Success code
    <span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:var(--theme-string);">"Ready!"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput"><span style="color: #000">Ready!</span></div></div>`
    },
    "onFail()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span>
<div>The callback function for failed initialisation.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">onFail</span>()
<span style="color:var(--theme-function);">onFail</span>(<span style="color:#000;">message</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onFail</span> = (<span style="color:#000;">message</span>) => {
    //Failure code
    <span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:var(--theme-string);">"ERROR! Message: "</span> + <span style="color:#000;">message</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput"><span style="color: #000">ERROR! Message: Already logged in</span>
</div></div>`
    },
    "initialize()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><span class="docsBanner" style="background: var(--warn-banner)">This function cannot be used if the session has already been initialised (Unless <span class="codeSmall">Session().end()</span> is run first)</span>
<div>Function that initialises the session by getting a session token from the login API. It requires the username and password of an existing user to have been set when creating the session.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">initialize</span>()</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:var(--theme-string);">"Initialised!"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput"><span style="color: #000">Initialised!</span>
</div></div>`
    },
    "end()": {
        "visible": false,
        "content": `
<div>Function that initialises the session by getting a session token from the login API. It requires the username and password of an existing user to have been set when creating the session.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">initialize</span>()</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">let</span> <span style="color:#000;">count</span> = <span style="color:var(--theme-global);">0</span>
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">count</span>++
    <span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color: #000;">count</span>)
    <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">end</span>()
    <span style="color:#000;">count</span> === <span style="color:var(--theme-global);">1</span> && <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput"><span style="color: #000">1</span>
<span style="color: #000">2</span>
</div></div>`
    },
    "Project()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><div>Project constructor function for interacting with projects.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">Project</span>(<span style="color:#000;">projectId</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)</div></div></div><h3 style="text-shadow: none; margin-top: 8px">Properties:</h3>
<div><h3 style="text-shadow: none; font-size: 17px"><span class="codeSmall">id</span></h3><br>
Value is the ID of the specified project. This is a writable value - if changed, the targeted project will also change.
<div class="codeDemo"><h3>Format</h3><div class="codeDemoContainer" style="color:#bfbfbf;"><span style="color:var(--theme-string);">"PROJECT ID"</span></div></div>
</div>`,
        "children": [
            "setData()",
            "setThumbnail()",
            "getMeta()",
            "getRemixes()",
            "getStudios()",
            "getComments()",
            "getCommentReplies()",
            "getData()",
            "removeComment()",
            "postComment()",
            "postFavorite()",
            "postLove()",
            "getCloudLogs()",
            "CloudSocket()"
        ]
    },
    "setData()": {
        "visible": false,
        "content": `<div>Function to set all data about the project, including scripts, description, title, etc.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">setData</span>(<span style="color:#000;">data</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">setData</span>(<span style="color:var(--theme-global);">{PROJECT DATA}</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "setThumbnail()": {
        "visible": false,
        "content": `<div>Function to set the thumbnail of the project. It takes a stringified PNG.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">setThumbnail</span>(<span style="color:#000;">pngString</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">setThumbnail</span>(<span style="color:var(--theme-string);">"PNG DATA"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "getMeta()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><div>Function that gets meta information about the project.</div><div>Gets meta information about the project, e.g. who the creator is.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getMeta</span>()</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">project</span>.<span style="color: var(--theme-function)">getMeta</span>().<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div><div class="codeDemoOutput">{
    <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">123456789</span>,
    <span style="color:var(--theme-string);">"title"</span>: <span style="color:var(--theme-string);">"TITLE"</span>,
    <span style="color:var(--theme-string);">"description"</span>: <span style="color:var(--theme-string);">"DESCRIPTION"</span>,
    <span style="color:var(--theme-string);">"instructions"</span>: <span style="color:var(--theme-string);">"INSTRUCTIONS"</span>,
    <span style="color:var(--theme-string);">"visibility"</span>: <span style="color:var(--theme-string);">"VISIBILITY"</span>,
    <span style="color:var(--theme-string);">"public"</span>: <span style="color:var(--theme-global);">true</span>,
    <span style="color:var(--theme-string);">"comments_allowed"</span>: <span style="color:var(--theme-global);">true</span>,
    <span style="color:var(--theme-string);">"is_published"</span>: <span style="color:var(--theme-global);">true</span>,
    <span style="color:var(--theme-string);">"author"</span>: {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">97654321</span>,
        <span style="color:var(--theme-string);">"username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"scratchteam"</span>: <span style="color:var(--theme-global);">false</span>,
        <span style="color:var(--theme-string);">"history"</span>: {
        <span style="color:var(--theme-string);">"joined</span>": <span style="color:var(--theme-string);">"TIMESTAMP"</span>
    },
        <span style="color:var(--theme-string);">"profile"</span>: {
            <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">null</span>,
            <span style="color:var(--theme-string);">"images"</span>: {
                <span style="color:var(--theme-string);">"90x90"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"60x60"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"55x55"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"50x50"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"32x32"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
            }
        }
    },
    <span style="color:var(--theme-string);">"image"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
    <span style="color:var(--theme-string);">"images"</span>: {
        <span style="color:var(--theme-string);">"282x218"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
        <span style="color:var(--theme-string);">"216x163"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
        <span style="color:var(--theme-string);">"200x200"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
        <span style="color:var(--theme-string);">"144x108"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
        <span style="color:var(--theme-string);">"135x102"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
        <span style="color:var(--theme-string);">"100x80"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
    },
        <span style="color:var(--theme-string);">"history"</span>: {
        <span style="color:var(--theme-string);">"created"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"modified"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"shared"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>
    },
    <span style="color:var(--theme-string);">"stats"</span>: {
        <span style="color:var(--theme-string);">"views"</span>: <span style="color:var(--theme-global);">VIEW COUNT</span>,
        <span style="color:var(--theme-string);">"loves"</span>: <span style="color:var(--theme-global);">LOVE COUNT</span>,
        <span style="color:var(--theme-string);">"favorites"</span>: <span style="color:var(--theme-global);">FAVORITE COUNT</span>,
        <span style="color:var(--theme-string);">"remixes"</span>: <span style="color:var(--theme-global);">REMIX COUNT</span>
    },
    <span style="color:var(--theme-string);">"remix"</span>: {
        <span style="color:var(--theme-string);">"parent"</span>: <span style="color:var(--theme-global);">ID OR NULL</span>,
        <span style="color:var(--theme-string);">"root"</span>: <span style="color:var(--theme-global);">ID OR NULL</span>
    },
    <span style="color:var(--theme-string);">"project_token"</span>: <span style="color:var(--theme-string);">"TOKEN"</span>
}</div></div></div>`
    },
    "getRemixes()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><div>Function to get the remixes of the project.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getRemixes</span>(<span style="color:#000;">offset</span>, <span style="color:#000;">limit</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">project</span>.<span style="color: var(--theme-function)">getRemixes</span>(<span style="color: var(--theme-global)">0</span>, <span style="color: var(--theme-global)">1</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">123456789</span>,
        <span style="color:var(--theme-string);">"title"</span>: <span style="color:var(--theme-string);">"TITLE"</span>,
        <span style="color:var(--theme-string);">"description"</span>: <span style="color:var(--theme-string);">"DESCRIPTION"</span>,
        <span style="color:var(--theme-string);">"instructions"</span>: <span style="color:var(--theme-string);">"INSTRUCTIONS"</span>,
        <span style="color:var(--theme-string);">"visibility"</span>: <span style="color:var(--theme-string);">"VISIBILITY"</span>,
        <span style="color:var(--theme-string);">"public"</span>: <span style="color:var(--theme-global);">true</span>,
        <span style="color:var(--theme-string);">"comments_allowed"</span>: <span style="color:var(--theme-global);">true</span>,
        <span style="color:var(--theme-string);">"is_published"</span>: <span style="color:var(--theme-global);">true</span>,
        <span style="color:var(--theme-string);">"author"</span>: {
            <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">97654321</span>,
            <span style="color:var(--theme-string);">"username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
            <span style="color:var(--theme-string);">"scratchteam"</span>: <span style="color:var(--theme-global);">false</span>,
            <span style="color:var(--theme-string);">"history"</span>: {
            <span style="color:var(--theme-string);">"joined</span>": <span style="color:var(--theme-string);">"TIMESTAMP"</span>
        },
            <span style="color:var(--theme-string);">"profile"</span>: {
                <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">null</span>,
                <span style="color:var(--theme-string);">"images"</span>: {
                    <span style="color:var(--theme-string);">"90x90"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"60x60"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"55x55"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"50x50"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"32x32"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
                }
            }
        },
        <span style="color:var(--theme-string);">"image"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
        <span style="color:var(--theme-string);">"images"</span>: {
            <span style="color:var(--theme-string);">"282x218"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"216x163"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"200x200"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"144x108"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"135x102"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"100x80"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
        },
            <span style="color:var(--theme-string);">"history"</span>: {
            <span style="color:var(--theme-string);">"created"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
            <span style="color:var(--theme-string);">"modified"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
            <span style="color:var(--theme-string);">"shared"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>
        },
        <span style="color:var(--theme-string);">"stats"</span>: {
            <span style="color:var(--theme-string);">"views"</span>: <span style="color:var(--theme-global);">VIEW COUNT</span>,
            <span style="color:var(--theme-string);">"loves"</span>: <span style="color:var(--theme-global);">LOVE COUNT</span>,
            <span style="color:var(--theme-string);">"favorites"</span>: <span style="color:var(--theme-global);">FAVORITE COUNT</span>,
            <span style="color:var(--theme-string);">"remixes"</span>: <span style="color:var(--theme-global);">REMIX COUNT</span>
        },
        <span style="color:var(--theme-string);">"remix"</span>: {
            <span style="color:var(--theme-string);">"parent"</span>: <span style="color:var(--theme-global);">ID OR NULL</span>,
            <span style="color:var(--theme-string);">"root"</span>: <span style="color:var(--theme-global);">ID OR NULL</span>
        },
    }
]</div></div></div>`
    },
    "getStudios()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><div>Function to get the studios that the project is in.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getStudios</span>(<span style="color:#000;">offset</span>, <span style="color:#000;">limit</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">project</span>.<span style="color: var(--theme-function)">getStudios</span>(<span style="color: var(--theme-global)">0</span>, <span style="color: var(--theme-global)">1</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"thumbnail_url"</span>: <span style="color:var(--theme-string);">"//uploads.scratch.mit.edu/projects/thumbnails/STUDIO ID.png"</span>,
        <span style="color:var(--theme-string);">"type"</span>: <span style="color:var(--theme-string);">"gallery"</span>,
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">STUDIO ID</span>,
        <span style="color:var(--theme-string);">"title"</span>: <span style="color:var(--theme-string);">"TITLE"</span>,
    }
]</div></div></div>`
    },
    "getComments()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><div>Function to get the comments on the project.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getComments</span>(<span style="color:#000;">offset</span>, <span style="color:#000;">limit</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">project</span>.<span style="color: var(--theme-function)">getComments</span>(<span style="color: var(--theme-global)">0</span>, <span style="color: var(--theme-global)">1</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">COMMENT ID</span>,
        <span style="color:var(--theme-string);">"parent_id"</span>: <span style="color:var(--theme-global);">NULL</span>,
        <span style="color:var(--theme-string);">"commentee_id"</span>: <span style="color:var(--theme-global);">NULL</span>,
        <span style="color:var(--theme-string);">"content"</span>: <span style="color:var(--theme-string);">"CONTENT"</span>,
        <span style="color:var(--theme-string);">"datetime_created"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"datetime_modified"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"visibility"</span>: <span style="color:var(--theme-string);">"VISIBILITY"</span>,,
        <span style="color:var(--theme-string);">"author"</span>: {
            <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">AUTHOR ID</span>,
            <span style="color:var(--theme-string);">"username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
            <span style="color:var(--theme-string);">"scratchteam"</span>: <span style="color:var(--theme-global);">false</span>,
            <span style="color:var(--theme-string);">"image"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
        },
        <span style="color:var(--theme-string);">"reply_count":</span> <span style="color:var(--theme-global);">REPLY COUNT</span>
    }
]</div></div></div>`
    },
    "getCloudLogs()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><div>Function to get the cloud logs of the project.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getComments</span>(<span style="color:#000;">offset</span>, <span style="color:#000;">limit</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">project</span>.<span style="color: var(--theme-function)">getCloudLogs</span>(<span style="color: var(--theme-global)">0</span>, <span style="color: var(--theme-global)">1</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"user"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"name"</span>: <span style="color:var(--theme-string);">"CLOUD VARIABLE NAME"</span>,
        <span style="color:var(--theme-string);">"value"</span>: <span style="color:var(--theme-global);">VALUE</span>,
        <span style="color:var(--theme-string);">"verb"</span>: <span style="color:var(--theme-string);">"set/delete/create"</span>,
    }
]</div></div></div>`
    },
    "getCommentReplies()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><div>Function to get the replies of a comment on the project.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getCommentReplies</span>(<span style="color:#000;">offset</span>, <span style="color:#000;">limit</span>, <span style="color:#000;">commentId</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">project</span>.<span style="color: var(--theme-function)">getCommentReplies</span>(<span style="color: var(--theme-global)">0</span>, <span style="color: var(--theme-global)">1</span>, <span style="color: var(--theme-string)">"987654321"</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">COMMENT ID</span>,
        <span style="color:var(--theme-string);">"parent_id"</span>: <span style="color:var(--theme-global);">ID</span>,
        <span style="color:var(--theme-string);">"commentee_id"</span>: <span style="color:var(--theme-global);">ID</span>,
        <span style="color:var(--theme-string);">"content"</span>: <span style="color:var(--theme-string);">"CONTENT"</span>,
        <span style="color:var(--theme-string);">"datetime_created"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"datetime_modified"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"visibility"</span>: <span style="color:var(--theme-string);">"VISIBILITY"</span>,,
        <span style="color:var(--theme-string);">"author"</span>: {
            <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">AUTHOR ID</span>,
            <span style="color:var(--theme-string);">"username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
            <span style="color:var(--theme-string);">"scratchteam"</span>: <span style="color:var(--theme-global);">false</span>,
            <span style="color:var(--theme-string);">"image"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
        },
        <span style="color:var(--theme-string);">"reply_count":</span> <span style="color:var(--theme-global);">REPLY COUNT</span>
    }
]</div></div></div>`
    },
    "getData()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><div>Function that gets project data.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getData</span>(<span style="color:#000;">data</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">getData</span>().<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput"><span style="color:var(--theme-global);">{PROJECT DATA}</span></div></div></div>`
    },
    "removeComment()": {
        "visible": false,
        "content": `<div>Function to remove a specific comment from the project.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">removeComment</span>(<span style="color:#000;">commentId</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">removeComment</span>(<span style="color:var(--theme-string);">"987654321"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "postComment()": {
        "visible": false,
        "content": `<div>Function to post a comment to the project.  The optional <span class="codeSmall">replyOptions</span> parameter takes a <span class="codeSmall"><button class="docsLink" data-sidebarId="replyOptions">replyOptions</button></span> object as an argument.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">postComment</span>(<span style="color:#000;">content</span>)
<span style="color:var(--theme-function);">postComment</span>(<span style="color:#000;">content</span>, <span style="color:#000;">replyOptions</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">postComment</span>(<span style="color:var(--theme-string);">"Comment content"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`,
    },
    "postLove()": {
        "visible": false,
        "content": `<div>Function to post a love to the project.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">postLove</span>()</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">postLove</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`,
    },
    "postFavorite()": {
        "visible": false,
        "content": `<div>Function to post a favorite to the project.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">postFavorite</span>()</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">postFavorite</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`,
    },
    "CloudSocket()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--warn-banner)">This function will not work if the session account is of "new Scratcher" status</span><div style="white-space: pre-wrap">Constructor function for cloud variable API interaction.

Note that you will need to use the cloud emoji in your code when referencing a cloud variable, e.g. <span class="codeSmall">setVar("☁ Cloud variable", 123)</span>, not <span class="codeSmall">setVar("Cloud variable", 123)</span>. It is important to note that "☁" is a seperate character to "☁️"

The optional <span class="codeSmall">variablePresets</span> parameter takes a <span class="codeSmall"><button class="docsLink" data-sidebarId="variablePresets">variablePresets</button></span> object as an argument
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">CloudSocket</span>()
<span style="color:var(--theme-function);">CloudSocket</span>(<span style="color:#000;">variablePresets</span>)</div></div><div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:var(--theme-def);">const</span> <span style="color: #000">socket</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">CloudSocket</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>
<h3 style="text-shadow: none; margin-top: 8px">Properties:</h3>
<div><h3 style="text-shadow: none; font-size: 17px"><span class="codeSmall">variables</span></h3><br>
An object containing key-value pairs of variable names and their values.
<div class="codeDemo"><h3>Format</h3><div class="codeDemoContainer" style="color:#bfbfbf;">{
    <span style="color:var(--theme-string);">"KEY"</span>: <span style="color:var(--theme-global);">VALUE</span>
}</div></div>
</div>
<div style="padding-top: 8px"><h3 style="text-shadow: none; font-size: 17px"><span class="codeSmall">socket</span></h3><br>
A WebSocket connection. <span class="codeSmall">site-api</span> API.
<div class="codeDemo"><h3>Format</h3><div class="codeDemoContainer" style="color:var(--theme-global);">ws.js WebSocket</div></div>
</div>`,
        "children": [
            "onOpen()",
            "onMessage()",
            "onError()",
            "onClose()",
            "onSet()",
            "onCreate()",
            "onDelete()",
            "close()",
            "connect()",
            "setVar()",
            "createVar()",
            "deleteVar()"
        ]
    },
    "onOpen()": {
        "visible": false,
        "content": `<div>The callback function for the cloud socket connection establishing successfully.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">onOpen</span>()
<span style="color:var(--theme-function);">onOpen</span>(<span style="color: #000;">event</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:var(--theme-def);">const</span> <span style="color: #000">socket</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">CloudSocket</span>()
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">onOpen</span> = () => {
        <span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:var(--theme-string)">"Socket opened!"</span>)
    }
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">connect</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput"><span style="color: #000">Socket opened!</span></div></div>`,
    },
    "onMessage()": {
        "visible": false,
        "content": `<div>The callback function for the cloud socket recieveing a message.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">onMessage</span>()
<span style="color:var(--theme-function);">onMessage</span>(<span style="color: #000;">event</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:var(--theme-def);">const</span> <span style="color: #000">socket</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">CloudSocket</span>()
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">onMessage</span> = () => {
        <span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:var(--theme-string)">"Socket received a message!"</span>)
    }
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">connect</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput"><span style="color: #000">Socket received a message!</span></div></div>`
    },
    "onError()": {
        "visible": false,
        "content": `<div>The callback function for the cloud socket encountering an error.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">onError</span>()
<span style="color:var(--theme-function);">onError</span>(<span style="color: #000;">event</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:var(--theme-def);">const</span> <span style="color: #000">socket</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">CloudSocket</span>()
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">onError</span> = () => {
        <span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:var(--theme-string)">"Socket encountered an error!"</span>)
    },
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">connect</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput"><span style="color: #000">Socket encountered an error!</span></div></div>`
    },
    "onClose()": {
        "visible": false,
        "content": `<div>The callback function for the cloud socket being closed.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">onClose</span>()
<span style="color:var(--theme-function);">onClose</span>(<span style="color: #000;">event</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:var(--theme-def);">const</span> <span style="color: #000">socket</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">CloudSocket</span>()
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">onClose</span> = () => {
        <span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:var(--theme-string)">"Socket closed!"</span>)
    }
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">connect</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput"><span style="color: #000">Socket closed!</span></div></div>`
    },
    "onSet()": {
        "visible": false,
        "content": `<div>The callback function for a variable being set.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">onSet</span>()
<span style="color:var(--theme-function);">onSet</span>(<span style="color: #000;">event</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:var(--theme-def);">const</span> <span style="color: #000">socket</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">CloudSocket</span>()
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">onSet</span> = () => {
        <span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:var(--theme-string)">"Variable set!"</span>)
    }
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">connect</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput"><span style="color: #000">Variable set!</span></div></div>`
    },
    "onCreate()": {
        "visible": false,
        "content": `<div>The callback function for a variable being created.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">onCreate</span>()
<span style="color:var(--theme-function);">onCreate</span>(<span style="color: #000;">event</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:var(--theme-def);">const</span> <span style="color: #000">socket</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">CloudSocket</span>()
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">onCreate</span> = () => {
        <span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:var(--theme-string)">"Variable created!"</span>)
    }
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">connect</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput"><span style="color: #000">Variable created!</span></div></div>`
    },
    "onDelete()": {
        "visible": false,
        "content": `<div>The callback function for a variable being deleted.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">onDelete</span>()
<span style="color:var(--theme-function);">onDelete</span>(<span style="color: #000;">event</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:var(--theme-def);">const</span> <span style="color: #000">socket</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">CloudSocket</span>()
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">onDelete</span> = () => {
        <span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:var(--theme-string)">"Variable deleted!"</span>)
    }
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">connect</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput"><span style="color: #000">Variable deleted!</span></div></div>`
    },
    "close()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--warn-banner)">This function will not work if the session account is of "new Scratcher" status</span><div>Function to close the cloud socket connection.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">close</span>()</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:var(--theme-def);">const</span> <span style="color: #000">socket</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">CloudSocket</span>()
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">onOpen</span> = () => {
        <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">close</span>()
    }
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">connect</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div>`
    },
    "setVar()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--warn-banner)">This function will not work if the session account is of "new Scratcher" status</span><div>Function to set the value of a cloud variable. It will not work if a string is provided as an argument for the <span class="codeSmall">value</span> parameter.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">setVar</span>(<span style="color:#000;">varName</span>, <span style="color:#000;">value</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:var(--theme-def);">const</span> <span style="color: #000">socket</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">CloudSocket</span>()
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">setVar</span>(<span style="color:var(--theme-string)">"☁ Cloud variable"</span>, <span style="color:var(--theme-global)">123</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div>`
    },
    "createVar()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--warn-banner)">The changes that this function makes are not permanent</span><span class="docsBanner" style="background: var(--warn-banner)">This function will not work if the session account is of "new Scratcher" status</span><div>Function to create a cloud variable.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">createVar</span>(<span style="color:#000;">varName</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:var(--theme-def);">const</span> <span style="color: #000">socket</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">CloudSocket</span>()
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">createVar</span>(<span style="color:var(--theme-string)">"☁ Cloud variable"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div>`
    },
    "deleteVar()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--warn-banner)">The changes that this function makes are not permanent</span><span class="docsBanner" style="background: var(--warn-banner)">This function will not work if the session account is of "new Scratcher" status</span><div>Function to delete a cloud variable.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">delete</span>(<span style="color:#000;">varName</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:var(--theme-def);">const</span> <span style="color: #000">socket</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">CloudSocket</span>()
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">deleteVar</span>(<span style="color:var(--theme-string)">"☁ Cloud variable"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div>`
    },
    "connect()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--warn-banner)">This function will not work if the session account is of "new Scratcher" status</span><div>Function to establish a 'websocket' or 'socket' with the cloud server (A persistent connection allowing both the server and the client to exchange packets).
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">connect</span>()</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">project</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Project</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:var(--theme-def);">const</span> <span style="color: #000">socket</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">project</span>.<span style="color:var(--theme-function);">CloudSocket</span>()
    <span style="color:#000;">socket</span>.<span style="color:var(--theme-function);">connect</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div>`
    },
    "Studio()": {
        "visible": false,
        "content": `<div>Studio constructor function for interacting with studios.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">Studio</span>(<span style="color:#000;">studioId</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">studio</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Studio</span>(<span style="color:var(--theme-string);">"123456789"</span>)</div></div></div><h3 style="text-shadow: none; margin-top: 8px">Properties:</h3>
<div><h3 style="text-shadow: none; font-size: 17px"><span class="codeSmall">id</span></h3><br>
Value is the ID of the specified studio. This is a writable value - if changed, the targeted studio will also change.
<div class="codeDemo"><h3>Format</h3><div class="codeDemoContainer" style="color:#bfbfbf;"><span style="color:var(--theme-string);">"STUDIO ID"</span></div></div>
</div>`,
        "children": [
            "setMeta()",
            "Studio: getMeta()",
            "Studio: getComments()",
            "Studio: getCommentReplies()",
            "Studio: removeComment()",
            "Studio: postComment()",
            "getProjects()",
            "getManagers()",
            "getCurators()",
            "getActivity()",
            "postProject()",
            "removeProject()",
            "inviteUser()",
            "removeUser()",
            "promoteUser()",
            "acceptInvite()",
            "Studio: follow()",
            "Studio: unfollow()",
            "anyoneCanAdd()"
        ]
    },
    "setMeta()": {
        "visible": false,
        "content": `<div>Sets meta information about a studio, e.g. description, title, etc.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">setMeta</span>(<span style="color:#000;">data</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">studio</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Studio</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">studio</span>.<span style="color:var(--theme-function);">setMeta</span>({<span style="color:var(--theme-string);">"description"</span>:<span style="color:var(--theme-string);">"Description"</span>})
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
</div></div>
</div>`
    },
    "Studio: getMeta()": {
        "visible": false,
        "name": "getMeta()",
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><div>Function that gets meta information about the studio, e.g. description, title, etc.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getMeta</span>()</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">studio</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Studio</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">studio</span>.<span style="color: var(--theme-function)">getMeta</span>().<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div><div class="codeDemoOutput">{
    <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">STUDIO ID</span>,
    <span style="color:var(--theme-string);">"title"</span>: <span style="color:var(--theme-string);">"TITLE"</span>,
    <span style="color:var(--theme-string);">"host"</span>: <span style="color:var(--theme-global);">AUTHOR ID</span>,
    <span style="color:var(--theme-string);">"description"</span>: <span style="color:var(--theme-string);">"DESCRIPTION"</span>,
    <span style="color:var(--theme-string);">"visibility"</span>: <span style="color:var(--theme-string);">"VISIBILITY"</span>,
    <span style="color:var(--theme-string);">"public"</span>: <span style="color:var(--theme-global);">true</span>,
    <span style="color:var(--theme-string);">"open_to_all"</span>: <span style="color:var(--theme-global);">true</span>,
    <span style="color:var(--theme-string);">"comments_allowed"</span>: <span style="color:var(--theme-global);">true</span>,
    <span style="color:var(--theme-string);">"image"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
    <span style="color:var(--theme-string);">"history"</span>: {
        <span style="color:var(--theme-string);">"created"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"modified"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>
    },
    <span style="color:var(--theme-string);">"stats"</span>: {
        <span style="color:var(--theme-string);">"comments"</span>: <span style="color:var(--theme-global);">VALUE</span>,
        <span style="color:var(--theme-string);">"followers"</span>: <span style="color:var(--theme-global);">VALUE</span>,
        <span style="color:var(--theme-string);">"managers"</span>: <span style="color:var(--theme-global);">VALUE</span>,
        <span style="color:var(--theme-string);">"projects"</span>: <span style="color:var(--theme-global);">VALUE</span>
    }
}</div></div></div>`
    },
    "Studio: getComments()": {
        "visible": false,
        "name": "getComments()",
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><div>Function to get the comments on the project.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getComments</span>(<span style="color:#000;">offset</span>, <span style="color:#000;">limit</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">studio</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Studio</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">studio</span>.<span style="color: var(--theme-function)">getComments</span>(<span style="color: var(--theme-global)">0</span>, <span style="color: var(--theme-global)">1</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">COMMENT ID</span>,
        <span style="color:var(--theme-string);">"parent_id"</span>: <span style="color:var(--theme-global);">NULL</span>,
        <span style="color:var(--theme-string);">"commentee_id"</span>: <span style="color:var(--theme-global);">NULL</span>,
        <span style="color:var(--theme-string);">"content"</span>: <span style="color:var(--theme-string);">"CONTENT"</span>,
        <span style="color:var(--theme-string);">"datetime_created"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"datetime_modified"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"visibility"</span>: <span style="color:var(--theme-string);">"VISIBILITY"</span>,,
        <span style="color:var(--theme-string);">"author"</span>: {
            <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">AUTHOR ID</span>,
            <span style="color:var(--theme-string);">"username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
            <span style="color:var(--theme-string);">"scratchteam"</span>: <span style="color:var(--theme-global);">false</span>,
            <span style="color:var(--theme-string);">"image"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
        },
        <span style="color:var(--theme-string);">"reply_count":</span> <span style="color:var(--theme-global);">REPLY COUNT</span>
    }
]</div></div></div>`
    },
    "Studio: getCommentReplies()": {
        "visible": false,
        "name": "getCommentReplies()",
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><div>Function to get the replies of a comment on the project.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getCommentReplies</span>(<span style="color:#000;">offset</span>, <span style="color:#000;">limit</span>, <span style="color:#000;">commentId</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">studio</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Studio</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">studio</span>.<span style="color: var(--theme-function)">getCommentReplies</span>(<span style="color: var(--theme-global)">0</span>, <span style="color: var(--theme-global)">1</span>, <span style="color: var(--theme-string)">"987654321"</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">COMMENT ID</span>,
        <span style="color:var(--theme-string);">"parent_id"</span>: <span style="color:var(--theme-global);">ID</span>,
        <span style="color:var(--theme-string);">"commentee_id"</span>: <span style="color:var(--theme-global);">ID</span>,
        <span style="color:var(--theme-string);">"content"</span>: <span style="color:var(--theme-string);">"CONTENT"</span>,
        <span style="color:var(--theme-string);">"datetime_created"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"datetime_modified"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"visibility"</span>: <span style="color:var(--theme-string);">"VISIBILITY"</span>,,
        <span style="color:var(--theme-string);">"author"</span>: {
            <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">AUTHOR ID</span>,
            <span style="color:var(--theme-string);">"username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
            <span style="color:var(--theme-string);">"scratchteam"</span>: <span style="color:var(--theme-global);">false</span>,
            <span style="color:var(--theme-string);">"image"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
        },
        <span style="color:var(--theme-string);">"reply_count":</span> <span style="color:var(--theme-global);">REPLY COUNT</span>
    }
]</div></div></div>`
    },
    "Studio: removeComment()": {
        "visible": false,
        "name": "removeComment()",
        "content": `<div>Function to remove a specific comment from the studio. Note that this will not work if the logged-in account and the comment poster are different or if the logged-in account.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">removeComment</span>(<span style="color:#000;">commentId</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">studio</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Studio</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">studio</span>.<span style="color:var(--theme-function);">removeComment</span>(<span style="color:var(--theme-string);">"987654321"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "Studio: postComment()": {
        "visible": false,
        "name": "postComment()",
        "content": `<div>Function to post a comment to the studio. The optional <span class="codeSmall">replyOptions</span> parameter takes a <span class="codeSmall"><button class="docsLink" data-sidebarId="replyOptions">replyOptions</button></span> object as an argument.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">postComment</span>(<span style="color:#000;">content</span>)
<span style="color:var(--theme-function);">postComment</span>(<span style="color:#000;">content</span>, <span style="color:#000;">replyOptions</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">studio</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Studio</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">studio</span>.<span style="color:var(--theme-function);">postComment</span>(<span style="color:var(--theme-string);">"Comment content"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`,
    },
    "getProjects()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span>
<div>Function that gets the projects in the studio.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getProjects</span>(<span style="color:#000;">offset</span>, <span style="color:#000;">limit</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">studio</span>.<span style="color: var(--theme-function)">getProjects</span>(<span style="color: var(--theme-global)">0</span>, <span style="color: var(--theme-global)">1</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">PROJECT ID</span>,
        <span style="color:var(--theme-string);">"title"</span>: <span style="color:var(--theme-string);">"TITLE"</span>,
        <span style="color:var(--theme-string);">"image"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
        <span style="color:var(--theme-string);">"creator_id"</span>: <span style="color:var(--theme-global);">AUTHOR ID</span>,
        <span style="color:var(--theme-string);">"username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"avatar"</span>: {
            <span style="color:var(--theme-string);">"90x90"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"60x60"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"55x55"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"50x50"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"32x32"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
        },
        <span style="color:var(--theme-string);">"actor_id</span>": <span style="color:var(--theme-global);">AUTHOR ID</span>
    }
]</div></div>`
    },
    "getManagers()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span>
<div>Function that gets the managers of the studio.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getManagers</span>(<span style="color:#000;">offset</span>, <span style="color:#000;">limit</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">getManagers</span>(<span style="color: var(--theme-global)">0</span>, <span style="color: var(--theme-global)">1</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput">[
        {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">USER ID</span>,
        <span style="color:var(--theme-string);">"username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"scratchteam"</span>: <span style="color:var(--theme-global);">false</span>,
        <span style="color:var(--theme-string);">"history"</span>: {
            <span style="color:var(--theme-string);">"joined"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>
        },
        <span style="color:var(--theme-string);">"profile"</span>: {
            <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">USER ID</span>,
            <span style="color:var(--theme-string);">"images"</span>: {
                <span style="color:var(--theme-string);">"90x90"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"60x60"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"55x55"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"50x50"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"32x32"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
            },
            <span style="color:var(--theme-string);">"status": <span style="color:var(--theme-string);">"CONTENT"</span>,
            <span style="color:var(--theme-string);">"bio": <span style="color:var(--theme-string);">"CONTENT"</span>,
            <span style="color:var(--theme-string);">"country": <span style="color:var(--theme-string);">"COUNTRY"</span>
        }
    }
]</div></div>`
    },
    "getCurators()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span>
<div>Function that gets the managers of the studio.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getCurators</span>(<span style="color:#000;">offset</span>, <span style="color:#000;">limit</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">getCurators</span>(<span style="color: var(--theme-global)">0</span>, <span style="color: var(--theme-global)">1</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput">[
        {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">USER ID</span>,
        <span style="color:var(--theme-string);">"username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"scratchteam"</span>: <span style="color:var(--theme-global);">false</span>,
        <span style="color:var(--theme-string);">"history"</span>: {
            <span style="color:var(--theme-string);">"joined"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>
        },
        <span style="color:var(--theme-string);">"profile"</span>: {
            <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">USER ID</span>,
            <span style="color:var(--theme-string);">"images"</span>: {
                <span style="color:var(--theme-string);">"90x90"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"60x60"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"55x55"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"50x50"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"32x32"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
            },
            <span style="color:var(--theme-string);">"status": <span style="color:var(--theme-string);">"CONTENT"</span>,
            <span style="color:var(--theme-string);">"bio": <span style="color:var(--theme-string);">"CONTENT"</span>,
            <span style="color:var(--theme-string);">"country": <span style="color:var(--theme-string);">"COUNTRY"</span>
        }
    }
]</div></div>`
    },
    "getActivity()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span>
<div>Function that gets the activity of the studio.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getActivity</span>(<span style="color:#000;">limit</span>)
<span style="color:var(--theme-function);">getActivity</span>(<span style="color:#000;">limit</span>, <span style="color:#000;">dateLimit</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">getActivity</span>(<span style="color: var(--theme-global)">7</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"datetime_created"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-string);">"becomehoststudio-ACTION ID"</span>,
        <span style="color:var(--theme-string);">"actor_id"</span>: <span style="color:var(--theme-global);">USER ID</span>,
        <span style="color:var(--theme-string);">"actor_username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"former_host_username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"recipient_username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"type"</span>: <span style="color:var(--theme-string);">"becomehoststudio"</span>,
        <span style="color:var(--theme-string);">"admin_actor"</span>: <span style="color:var(--theme-global);">false</span>
    },
    {
        <span style="color:var(--theme-string);">"datetime_created"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-string);">"becomeownerstudio-ACTION ID"</span>,
        <span style="color:var(--theme-string);">"actor_id"</span>: <span style="color:var(--theme-global);">USER ID</span>,
        <span style="color:var(--theme-string);">"actor_username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"recipient_username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"type"</span>: <span style="color:var(--theme-string);">"becomeownerstudio"</span>
    },
    {
        <span style="color:var(--theme-string);">"datetime_created"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-string);">"becomecurator-ACTION ID"</span>,
        <span style="color:var(--theme-string);">"actor_id"</span>: <span style="color:var(--theme-global);">USER ID</span>,
        <span style="color:var(--theme-string);">"username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"type"</span>: <span style="color:var(--theme-string);">"becomecurator"</span>,
        <span style="color:var(--theme-string);">"actor_username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>
    },
    {
        <span style="color:var(--theme-string);">"datetime_created"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-string);">"removecuratorstudio-ACTION ID"</span>,
        <span style="color:var(--theme-string);">"actor_id"</span>: <span style="color:var(--theme-global);">USER ID</span>,
        <span style="color:var(--theme-string);">"username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"type"</span>: <span style="color:var(--theme-string);">"removecuratorstudio"</span>,
        <span style="color:var(--theme-string);">"actor_username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>
    },
    {
        <span style="color:var(--theme-string);">"datetime_created"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-string);">"updatestudio-ACTION ID"</span>,
        <span style="color:var(--theme-string);">"actor_id"</span>: <span style="color:var(--theme-global);">USER ID</span>,
        <span style="color:var(--theme-string);">"type"</span>: <span style="color:var(--theme-string);">"updatestudio"</span>,
        <span style="color:var(--theme-string);">"actor_username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>
    },
    {
        <span style="color:var(--theme-string);">"datetime_created"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-string);">"removeprojectstudio-26251190"</span>,
        <span style="color:var(--theme-string);">"actor_id"</span>: <span style="color:var(--theme-global);">USER ID</span>,
        <span style="color:var(--theme-string);">"project_id"</span>: <span style="color:var(--theme-global);">PROJECT ID</span>,
        <span style="color:var(--theme-string);">"project_title"</span>: <span style="color:var(--theme-string);">"TITLE"</span>,
        <span style="color:var(--theme-string);">"type"</span>: <span style="color:var(--theme-string);">"removeprojectstudio"</span>,
        <span style="color:var(--theme-string);">"actor_username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>
    },
    {
        <span style="color:var(--theme-string);">"datetime_created"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-string);">"addprojecttostudio-181735986"</span>,
        <span style="color:var(--theme-string);">"actor_id"</span>: <span style="color:var(--theme-global);">USER ID</span>,
        <span style="color:var(--theme-string);">"project_id"</span>: <span style="color:var(--theme-global);">PROJECT ID</span>,
        <span style="color:var(--theme-string);">"project_title"</span>: <span style="color:var(--theme-string);">"TITLE"</span>,
        <span style="color:var(--theme-string);">"type"</span>: <span style="color:var(--theme-string);">"addprojecttostudio"</span>,
        <span style="color:var(--theme-string);">"actor_username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>
    }
]</div></div>`
    },
    "postProject()": {
        "visible": false,
        "content": `<div>Function to add a project to the studio. This function will succeed only if at least one of these conditions is met: the studio has "anyone can add projects" toggled on or the logged in account is a member of the studio.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">postProject</span>(<span style="color:#000;">projectId</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">studio</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Studio</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">studio</span>.<span style="color:var(--theme-function);">postProject</span>(<span style="color:var(--theme-string);">"987654321"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "removeProject()": {
        "visible": false,
        "content": `<div>Function to remove a specific project from the studio. Note that this requires the logged-in account to either be a manager of the studio, have created the project, or be the curator that added the project.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">removeProject</span>(<span style="color:#000;">projectId</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">studio</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Studio</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">studio</span>.<span style="color:var(--theme-function);">removeProject</span>(<span style="color:var(--theme-string);">"987654321"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "inviteUser()": {
        "visible": false,
        "content": `<div>Function to invite a user to the studio. This function will only work if the logged-in account is a manager of the studio.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">inviteUser</span>(<span style="color:#000;">name</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">studio</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Studio</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">studio</span>.<span style="color:var(--theme-function);">inviteUser</span>(<span style="color:var(--theme-string);">"Username"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "removeUser()": {
        "visible": false,
        "content": `<div>Function to remove a curator/manager from the studio. This function will only work if the logged-in account is a manager of the studio or if the logged-in user is the targeted user.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">removeUser</span>(<span style="color:#000;">name</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">studio</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Studio</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">studio</span>.<span style="color:var(--theme-function);">removeUser</span>(<span style="color:var(--theme-string);">"Username"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "promoteUser()": {
        "visible": false,
        "content": `<div>Function to promote a curator of the studio to manager rank. This function will only work if the logged-in account is a manager of the studio.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">promoteUser</span>(<span style="color:#000;">name</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">studio</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Studio</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">studio</span>.<span style="color:var(--theme-function);">promoteUser</span>(<span style="color:var(--theme-string);">"Username"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "acceptInvite()": {
        "visible": false,
        "content": `<div>Function to join the studio as a non-member. This function will only work if the logged-in account has an active invite from the studio.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">acceptInvite</span>()</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">studio</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Studio</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">studio</span>.<span style="color:var(--theme-function);">acceptInvite</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "Studio: follow()": {
        "visible": false,
        "name": "follow()",
        "content": `<div>Function for the logged-in user to follow the studio.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">follow</span>()</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">studio</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Studio</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">studio</span>.<span style="color:var(--theme-function);">follow</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "Studio: unfollow()": {
        "visible": false,
        "name": "unfollow()",
        "content": `<div>Function for the logged-in user to stop following the studio.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">unfollow</span>()</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">studio</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Studio</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">studio</span>.<span style="color:var(--theme-function);">unfollow</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "anyoneCanAdd()": {
        "visible": false,
        "content": `<div>Function to toggle the "anyone can add" switch on studios. This function can only be run by studio managers.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">anyoneCanAdd</span>(<span style="color:#000;">anyone</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">studio</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Studio</span>(<span style="color:var(--theme-string);">"123456789"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">studio</span>.<span style="color:var(--theme-function);">anyoneCanAdd</span>(<span style="color:var(--theme-global);">true</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "User()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><div>User constructor function for interacting with other users.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">User</span>(<span style="color:#000;">name</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">studio</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">User</span>(<span style="color:var(--theme-string);">"Username"</span>)</div></div></div><h3 style="text-shadow: none; margin-top: 8px">Properties:</h3>
<div><h3 style="text-shadow: none; font-size: 17px"><span class="codeSmall">username</span></h3><br>
Value is the username of the targeted user. This is a writable value - if changed, the targeted user will also change.
<div class="codeDemo"><h3>Format</h3><div class="codeDemoContainer" style="color:#bfbfbf;"><span style="color:var(--theme-string);">"USERNAME"</span></div></div>
</div>
<div style="padding-top: 8px"><h3 style="text-shadow: none; font-size: 17px"><span class="codeSmall">xmlProfile</span></h3><br>
Value is a collection of methods for interacting with the <span class="codeSmall">site-api</span> API.
<div class="codeDemo"><h3>Format</h3><div class="codeDemoContainer" style="color:#bfbfbf;"><button class="docsLink" data-sidebarId="xmlProfile">User: xmlProfile</button></div></div>
</div>
`,
        "children": [
            "xmlProfile",
            "getSharedProjects()",
            "getFavoriteProjects()",
            "getFollowing()",
            "getFollowers()",
            "getCuratedStudios()",
            "getInfo()",
            "getMessagesCount()",
            "follow()",
            "unfollow()"
        ]
    },
    "xmlProfile": {
        "visible": false,
        "content": `<div>Collection of methods for interacting with the <span class="codeSmall">site-api</span> API. Most output is either HTML or XML and can be parsed with the <span class="codeSmall"><button class="docsLink" data-sidebarId="xmlParser">xmlParser</button></span> collection.</div>`,
        "children": [
            "XML: getComments()",
            "XML: getActivity()",
            "getProfile()",
            "XML: getProjects()",
            "XML: getFavorites()",
            "XML: getCuratedStudios()",
            "getFollowedStudios()",
            "XML: getFollowedUsers()",
            "XML: getFollowingUsers()",
            "XML: postComment()"
        ]
    },
    "XML: getComments()": {
        "visible": false,
        "name": "getComments()",
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><span class="docsBanner" style="background: var(--warn-banner)">This function returns a value in a format different to that of other <span class="codeSmall">getComments()</span> functions</span><span class="docsBanner" style="background: var(--warn-banner)">This function returns a HTML or XML string</span><div>Function to get the comments on the user's profile. It returns a HTML output interpretable by <span class="codeSmall"><button class="docsLink" data-sidebarId="profileComments()">xmlParser.profileComments()</button></span>.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getComments</span>(<span style="color:#000;">page</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:#000;">xmlProfile</span>.<span style="color: var(--theme-function)">getComments</span>(<span style="color:var(--theme-string);">"1"</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">y</span>=><span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:#000;">session</span>.<span style="color:#000;">xmlParser</span>.<span style="color:var(--theme-function);">profileComments</span>(<span style="color:#000;">y</span>))))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()
</div><div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-string);">"COMMENT ID"</span>,
        <span style="color:var(--theme-string);">"authorString"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"content"</span>: <span style="color:var(--theme-string);">"CONTENT"</span>,
        <span style="color:var(--theme-string);">"replies"</span>: [
            {
                <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-string);">"COMMENT ID"</span>,
                <span style="color:var(--theme-string);">"authorString"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
                <span style="color:var(--theme-string);">"content"</span>: <span style="color:var(--theme-string);">"CONTENT"</span>
            }
        ]
    }
]
</div></div></div>`
    },
    "XML: getActivity()": {
        "visible": false,
        "name": "getActivity()",
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><span class="docsBanner" style="background: var(--warn-banner)">This function returns a value in a format different to that of other <span class="codeSmall">getActivity()</span> functions</span><span class="docsBanner" style="background: var(--warn-banner)">This function returns a HTML or XML string</span><div>Function to the user's activity. It returns a HTML output interpretable by <span class="codeSmall"><button class="docsLink" data-sidebarId="profileActivity()">xmlParser.profileActivity()</button></span>.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getActivity</span>(<span style="color:#000;">limit</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:#000;">xmlProfile</span>.<span style="color: var(--theme-function)">getActivity</span>(<span style="color:var(--theme-string);">"1"</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">y</span>=><span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:#000;">session</span>.<span style="color:#000;">xmlParser</span>.<span style="color:var(--theme-function);">profileActivity</span>(<span style="color:#000;">y</span>))))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()
</div><div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"action"</span>: <span style="color:var(--theme-string);">"ACTION"</span>,
        <span style="color:var(--theme-string);">"actor"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"time"</span>: <span style="color:var(--theme-string);">"VAGUE TIME SINCE"</span>,
        <span style="color:var(--theme-string);">"targets"</span>: [
            <span style="color:var(--theme-string);">"URL"</span>
        ]
    }
]
</div></div></div>`
    },
    "getProfile()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><span class="docsBanner" style="background: var(--warn-banner)">This function returns a HTML or XML string</span><div>Function to get the user's profile page. The featured project and label (e.g. "Featured project", "Why I scratch", etc.) can be extracted with <span class="codeSmall"><button class="docsLink" data-sidebarId="profileFeatured()">xmlParser.profileFeatured()</button></span>. The user's featured project cannot be accesed by any other API.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getActivity</span>(<span style="color:#000;">limit</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:#000;">xmlProfile</span>.<span style="color: var(--theme-function)">getActivity</span>(<span style="color:var(--theme-string);">"1"</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">y</span>=><span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:#000;">session</span>.<span style="color:#000;">xmlParser</span>.<span style="color:var(--theme-function);">profileActivity</span>(<span style="color:#000;">y</span>))))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()
</div><div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"action"</span>: <span style="color:var(--theme-string);">"ACTION"</span>,
        <span style="color:var(--theme-string);">"actor"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"time"</span>: <span style="color:var(--theme-string);">"VAGUE TIME SINCE"</span>,
        <span style="color:var(--theme-string);">"targets"</span>: [
            <span style="color:var(--theme-string);">"URL"</span>
        ]
    }
]
</div></div></div>`
    },
    "XML: getProjects()": {
        "visible": false,
        "name": "getProjects()",
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><span class="docsBanner" style="background: var(--warn-banner)">This function returns a value in a format different to that of other <span class="codeSmall">getProjects()</span> functions</span><span class="docsBanner" style="background: var(--warn-banner)">This function returns a HTML or XML string</span><div>Function to get the user's shared projects page. Output can be parsed using <span class="codeSmall"><button class="docsLink" data-sidebarId="collection()">xmlParser.collections()</button></span>.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getProjects</span>(<span style="color:#000;">page</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:#000;">xmlProfile</span>.<span style="color: var(--theme-function)">getProjects</span>(<span style="color:var(--theme-string);">"1"</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">y</span>=><span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:#000;">session</span>.<span style="color:#000;">xmlParser</span>.<span style="color:var(--theme-function);">profileActivity</span>(<span style="color:#000;">y</span>))))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()
</div><div class="codeDemoOutput">[
    <span style="color:var(--theme-string);">"/projects/123456789"</span>
]
</div></div></div>`
    },
    "XML: getFavorites()": {
        "visible": false,
        "name": "getFavorites()",
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><span class="docsBanner" style="background: var(--warn-banner)">This function returns a value in a format different to that of other <span class="codeSmall">getFavorites()</span> functions</span><span class="docsBanner" style="background: var(--warn-banner)">This function returns a HTML or XML string</span><div>Function to get the user's favourite projects page. Output can be parsed using <span class="codeSmall"><button class="docsLink" data-sidebarId="collection()">xmlParser.collections()</button></span>.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getFavorites</span>(<span style="color:#000;">page</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:#000;">xmlProfile</span>.<span style="color: var(--theme-function)">getFavorites</span>(<span style="color:var(--theme-string);">"1"</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">y</span>=><span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:#000;">session</span>.<span style="color:#000;">xmlParser</span>.<span style="color:var(--theme-function);">profileActivity</span>(<span style="color:#000;">y</span>))))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()
</div><div class="codeDemoOutput">[
    <span style="color:var(--theme-string);">"/projects/123456789"</span>
]
</div></div></div>`
    },
    "XML: getCuratedStudios()": {
        "visible": false,
        "name": "getCuratedStudios()",
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><span class="docsBanner" style="background: var(--warn-banner)">This function returns a value in a format different to that of other <span class="codeSmall">getCuratedStudios()</span> functions</span><span class="docsBanner" style="background: var(--warn-banner)">This function returns a HTML or XML string</span><div>Function to get the user's curated studios projects page. Output can be parsed using <span class="codeSmall"><button class="docsLink" data-sidebarId="collection()">xmlParser.collections()</button></span>.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getCuratedStudios</span>(<span style="color:#000;">page</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:#000;">xmlProfile</span>.<span style="color: var(--theme-function)">getCuratedStudios</span>(<span style="color:var(--theme-string);">"1"</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">y</span>=><span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:#000;">session</span>.<span style="color:#000;">xmlParser</span>.<span style="color:var(--theme-function);">profileActivity</span>(<span style="color:#000;">y</span>))))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()
</div><div class="codeDemoOutput">[
    <span style="color:var(--theme-string);">"/studios/123456789"</span>
]
</div></div></div>`
    },
    "getFollowedStudios()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><span class="docsBanner" style="background: var(--warn-banner)">This function returns a HTML or XML string</span><div>Function to get the user's followed studios page. Output can be parsed using <span class="codeSmall"><button class="docsLink" data-sidebarId="collection()">xmlParser.collections()</button></span>.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getFollowedStudios</span>(<span style="color:#000;">page</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:#000;">xmlProfile</span>.<span style="color: var(--theme-function)">getFollowedStudios</span>(<span style="color:var(--theme-string);">"1"</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">y</span>=><span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:#000;">session</span>.<span style="color:#000;">xmlParser</span>.<span style="color:var(--theme-function);">profileActivity</span>(<span style="color:#000;">y</span>))))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()
</div><div class="codeDemoOutput">[
    <span style="color:var(--theme-string);">"/studios/123456789"</span>
]
</div></div></div>`
    },
    "XML: getFollowedUsers()": {
        "visible": false,
        "name": "getFollowedUsers()",
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><span class="docsBanner" style="background: var(--warn-banner)">This function returns a value in a format different to that of other <span class="codeSmall">getFollowedUsers()</span></span><span class="docsBanner" style="background: var(--warn-banner)">This function returns a HTML or XML string</span><div>Function to get the user's followed users page. Output can be parsed using <span class="codeSmall"><button class="docsLink" data-sidebarId="collection()">xmlParser.collections()</button></span>.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getFollowedUsers</span>(<span style="color:#000;">page</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:#000;">xmlProfile</span>.<span style="color: var(--theme-function)">getFollowedUsers</span>(<span style="color:var(--theme-string);">"1"</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">y</span>=><span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:#000;">session</span>.<span style="color:#000;">xmlParser</span>.<span style="color:var(--theme-function);">profileActivity</span>(<span style="color:#000;">y</span>))))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()
</div><div class="codeDemoOutput">[
    <span style="color:var(--theme-string);">"/users/Username"</span>
]
</div></div></div>`
    },
    "XML: getFollowingUsers()": {
        "visible": false,
        "name": "getFollowingUsers()",
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><span class="docsBanner" style="background: var(--warn-banner)">This function returns a value in a format different to that of other <span class="codeSmall">getFollowingUsers()</span></span><span class="docsBanner" style="background: var(--warn-banner)">This function returns a HTML or XML string</span><div>Function to get the user's followers page. Output can be parsed using <span class="codeSmall"><button class="docsLink" data-sidebarId="collection()">xmlParser.collections()</button></span>.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getFollowingUsers</span>(<span style="color:#000;">page</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:#000;">xmlProfile</span>.<span style="color: var(--theme-function)">getFollowingUsers</span>(<span style="color:var(--theme-string);">"1"</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">y</span>=><span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>(<span style="color:#000;">session</span>.<span style="color:#000;">xmlParser</span>.<span style="color:var(--theme-function);">profileActivity</span>(<span style="color:#000;">y</span>))))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()
</div><div class="codeDemoOutput">[
    <span style="color:var(--theme-string);">"/users/Username"</span>
]
</div></div></div>`
    },
    "XML: postComment()": {
        "visible": false,
        "name": "postComment()",
        "content": `<span class="docsBanner" style="background: var(--warn-banner)">This function returns a HTML or XML string</span><span class="docsBanner" style="background: var(--warn-banner)">This function returns a value in a format different to that of other <span class="codeSmall">getFollowingUsers()</span></span><div>Function to post a comment to the user's profile. The optional <span class="codeSmall">replyOptions</span> parameter takes a <span class="codeSmall"><button class="docsLink" data-sidebarId="replyOptions">replyOptions</button></span> object as an argument.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">postComment</span>(<span style="color:#000;">page</span>)
<span style="color:var(--theme-function);">postComment</span>(<span style="color:#000;">page</span>, <span style="color:#000;">replyOptions</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:#000;">xmlProfile</span>.<span style="color: var(--theme-function)">postComment</span>(<span style="color:var(--theme-string);">"content"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()
</div></div></div>`
    },
    "getSharedProjects()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span>
<div>Function that gets the shared projects of the user.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getSharedProjects</span>(<span style="color:#000;">offset</span>, <span style="color:#000;">limit</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color: var(--theme-function)">getSharedProjects</span>(<span style="color: var(--theme-global)">0</span>, <span style="color: var(--theme-global)">1</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">123456789</span>,
        <span style="color:var(--theme-string);">"title"</span>: <span style="color:var(--theme-string);">"TITLE"</span>,
        <span style="color:var(--theme-string);">"description"</span>: <span style="color:var(--theme-string);">"DESCRIPTION"</span>,
        <span style="color:var(--theme-string);">"instructions"</span>: <span style="color:var(--theme-string);">"INSTRUCTIONS"</span>,
        <span style="color:var(--theme-string);">"visibility"</span>: <span style="color:var(--theme-string);">"VISIBILITY"</span>,
        <span style="color:var(--theme-string);">"public"</span>: <span style="color:var(--theme-global);">true</span>,
        <span style="color:var(--theme-string);">"comments_allowed"</span>: <span style="color:var(--theme-global);">true</span>,
        <span style="color:var(--theme-string);">"is_published"</span>: <span style="color:var(--theme-global);">true</span>,
        <span style="color:var(--theme-string);">"author"</span>: {
            <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">97654321</span>,
            <span style="color:var(--theme-string);">"username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
            <span style="color:var(--theme-string);">"scratchteam"</span>: <span style="color:var(--theme-global);">false</span>,
            <span style="color:var(--theme-string);">"history"</span>: {
            <span style="color:var(--theme-string);">"joined</span>": <span style="color:var(--theme-string);">"TIMESTAMP"</span>
        },
            <span style="color:var(--theme-string);">"profile"</span>: {
                <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">null</span>,
                <span style="color:var(--theme-string);">"images"</span>: {
                    <span style="color:var(--theme-string);">"90x90"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"60x60"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"55x55"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"50x50"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"32x32"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
                }
            }
        },
        <span style="color:var(--theme-string);">"image"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
        <span style="color:var(--theme-string);">"images"</span>: {
            <span style="color:var(--theme-string);">"282x218"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"216x163"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"200x200"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"144x108"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"135x102"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"100x80"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
        },
            <span style="color:var(--theme-string);">"history"</span>: {
            <span style="color:var(--theme-string);">"created"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
            <span style="color:var(--theme-string);">"modified"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
            <span style="color:var(--theme-string);">"shared"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>
        },
        <span style="color:var(--theme-string);">"stats"</span>: {
            <span style="color:var(--theme-string);">"views"</span>: <span style="color:var(--theme-global);">VIEW COUNT</span>,
            <span style="color:var(--theme-string);">"loves"</span>: <span style="color:var(--theme-global);">LOVE COUNT</span>,
            <span style="color:var(--theme-string);">"favorites"</span>: <span style="color:var(--theme-global);">FAVORITE COUNT</span>,
            <span style="color:var(--theme-string);">"remixes"</span>: <span style="color:var(--theme-global);">REMIX COUNT</span>
        },
        <span style="color:var(--theme-string);">"remix"</span>: {
            <span style="color:var(--theme-string);">"parent"</span>: <span style="color:var(--theme-global);">ID OR NULL</span>,
            <span style="color:var(--theme-string);">"root"</span>: <span style="color:var(--theme-global);">ID OR NULL</span>
        },
    }
]</div></div></div>`
    },
    "getFavoriteProjects()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span>
<div>Function that gets the favourite projects of the user.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getFavoriteProjects</span>(<span style="color:#000;">offset</span>, <span style="color:#000;">limit</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color: var(--theme-function)">getFavoriteProjects</span>(<span style="color: var(--theme-global)">0</span>, <span style="color: var(--theme-global)">1</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">123456789</span>,
        <span style="color:var(--theme-string);">"title"</span>: <span style="color:var(--theme-string);">"TITLE"</span>,
        <span style="color:var(--theme-string);">"description"</span>: <span style="color:var(--theme-string);">"DESCRIPTION"</span>,
        <span style="color:var(--theme-string);">"instructions"</span>: <span style="color:var(--theme-string);">"INSTRUCTIONS"</span>,
        <span style="color:var(--theme-string);">"visibility"</span>: <span style="color:var(--theme-string);">"VISIBILITY"</span>,
        <span style="color:var(--theme-string);">"public"</span>: <span style="color:var(--theme-global);">true</span>,
        <span style="color:var(--theme-string);">"comments_allowed"</span>: <span style="color:var(--theme-global);">true</span>,
        <span style="color:var(--theme-string);">"is_published"</span>: <span style="color:var(--theme-global);">true</span>,
        <span style="color:var(--theme-string);">"author"</span>: {
            <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">97654321</span>,
            <span style="color:var(--theme-string);">"username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
            <span style="color:var(--theme-string);">"scratchteam"</span>: <span style="color:var(--theme-global);">false</span>,
            <span style="color:var(--theme-string);">"history"</span>: {
            <span style="color:var(--theme-string);">"joined</span>": <span style="color:var(--theme-string);">"TIMESTAMP"</span>
        },
            <span style="color:var(--theme-string);">"profile"</span>: {
                <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">null</span>,
                <span style="color:var(--theme-string);">"images"</span>: {
                    <span style="color:var(--theme-string);">"90x90"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"60x60"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"55x55"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"50x50"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"32x32"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
                }
            }
        },
        <span style="color:var(--theme-string);">"image"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
        <span style="color:var(--theme-string);">"images"</span>: {
            <span style="color:var(--theme-string);">"282x218"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"216x163"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"200x200"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"144x108"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"135x102"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"100x80"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
        },
            <span style="color:var(--theme-string);">"history"</span>: {
            <span style="color:var(--theme-string);">"created"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
            <span style="color:var(--theme-string);">"modified"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
            <span style="color:var(--theme-string);">"shared"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>
        },
        <span style="color:var(--theme-string);">"stats"</span>: {
            <span style="color:var(--theme-string);">"views"</span>: <span style="color:var(--theme-global);">VIEW COUNT</span>,
            <span style="color:var(--theme-string);">"loves"</span>: <span style="color:var(--theme-global);">LOVE COUNT</span>,
            <span style="color:var(--theme-string);">"favorites"</span>: <span style="color:var(--theme-global);">FAVORITE COUNT</span>,
            <span style="color:var(--theme-string);">"remixes"</span>: <span style="color:var(--theme-global);">REMIX COUNT</span>
        },
        <span style="color:var(--theme-string);">"remix"</span>: {
            <span style="color:var(--theme-string);">"parent"</span>: <span style="color:var(--theme-global);">ID OR NULL</span>,
            <span style="color:var(--theme-string);">"root"</span>: <span style="color:var(--theme-global);">ID OR NULL</span>
        },
    }
]</div></div></div>`
    },
    "getFollowing()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span>
<div>Function that gets the users that the user is following.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getFollowing</span>(<span style="color:#000;">offset</span>, <span style="color:#000;">limit</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color: var(--theme-function)">getFollowing</span>(<span style="color: var(--theme-global)">0</span>, <span style="color: var(--theme-global)">1</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">USER ID</span>,
        <span style="color:var(--theme-string);">"username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"scratchteam"</span>: <span style="color:var(--theme-global);">false</span>,
        <span style="color:var(--theme-string);">"history"</span>: {
            <span style="color:var(--theme-string);">"joined"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>
        },
        <span style="color:var(--theme-string);">"profile"</span>: {
            <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">USER ID</span>,
            <span style="color:var(--theme-string);">"images"</span>: {
                <span style="color:var(--theme-string);">"90x90"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"60x60"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"55x55"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"50x50"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"32x32"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
            },
            <span style="color:var(--theme-string);">"status":</span> <span style="color:var(--theme-string);">"CONTENT"</span>,
            <span style="color:var(--theme-string);">"bio"</span>: <span style="color:var(--theme-string);">"CONTENT"</span>,
            <span style="color:var(--theme-string);">"country"</span>: <span style="color:var(--theme-string);">"COUNTRY"</span>
        }
    }
]</div></div></div>`
    },
    "getFollowers()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span>
<div>Function that gets the user's followers.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getFollowers</span>(<span style="color:#000;">offset</span>, <span style="color:#000;">limit</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color: var(--theme-function)">getFollowers</span>(<span style="color: var(--theme-global)">0</span>, <span style="color: var(--theme-global)">1</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">USER ID</span>,
        <span style="color:var(--theme-string);">"username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"scratchteam"</span>: <span style="color:var(--theme-global);">false</span>,
        <span style="color:var(--theme-string);">"history"</span>: {
            <span style="color:var(--theme-string);">"joined"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>
        },
        <span style="color:var(--theme-string);">"profile"</span>: {
            <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">USER ID</span>,
            <span style="color:var(--theme-string);">"images"</span>: {
                <span style="color:var(--theme-string);">"90x90"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"60x60"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"55x55"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"50x50"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                <span style="color:var(--theme-string);">"32x32"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
            },
            <span style="color:var(--theme-string);">"status":</span> <span style="color:var(--theme-string);">"CONTENT"</span>,
            <span style="color:var(--theme-string);">"bio"</span>: <span style="color:var(--theme-string);">"CONTENT"</span>,
            <span style="color:var(--theme-string);">"country"</span>: <span style="color:var(--theme-string);">"COUNTRY"</span>
        }
    }
]</div></div></div>`
    },
    "getCuratedStudios()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span>
<div>Function that gets the studios that the user curates.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getCuratedStudios</span>(<span style="color:#000;">offset</span>, <span style="color:#000;">limit</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color: var(--theme-function)">getCuratedStudios</span>(<span style="color: var(--theme-global)">0</span>, <span style="color: var(--theme-global)">1</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput">[
    {
        <span style="color: var(--theme-string)">"id"</span>: <span style="color: var(--theme-global)">123456789</span>,
        <span style="color: var(--theme-string)">"title"</span>: <span style="color: var(--theme-string)">"TITLE"</span>,
        <span style="color: var(--theme-string)">"host"</span>: <span style="color: var(--theme-global)">987654321</span>,
        <span style="color: var(--theme-string)">"description"</span>: <span style="color: var(--theme-string)">"DESCRIPTION"</span>,
        <span style="color: var(--theme-string)">"visibility"</span>: <span style="color: var(--theme-string)">"VISIBILITY"</span>,
        <span style="color: var(--theme-string)">"public"</span>: <span style="color: var(--theme-global)">true</span>,
        <span style="color: var(--theme-string)">"open_to_all"</span>: <span style="color: var(--theme-global)">false</span>,
        <span style="color: var(--theme-string)">"comments_allowed"</span>: <span style="color: var(--theme-global)">true</span>,
        <span style="color: var(--theme-string)">"image"</span>: <span style="color: var(--theme-string)">"IMAGE URL"</span>,
        <span style="color: var(--theme-string)">"history"</span>:{
            <span style="color: var(--theme-string)">"created"</span>: <span style="color: var(--theme-string)">"TIMESTAMP"</span>,
            <span style="color: var(--theme-string)">"modified"</span>: <span style="color: var(--theme-string)">"TIMESTAMP"</span>
        },
        <span style="color: var(--theme-string)">"stats"</span>: {}
    }
]</div></div></div>`
    },
    "getInfo()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span>
<div>Function that gets meta information about the user.
<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getFollowers</span>(<span style="color:#000;">offset</span>, <span style="color:#000;">limit</span>)</div></div>
<div class="codeDemo"><h3>Example</h3><div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color: var(--theme-function)">getFollowers</span>(<span style="color: var(--theme-global)">0</span>, <span style="color: var(--theme-global)">1</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div>
<div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">USER ID</span>,
        <span style="color:var(--theme-string);">"username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"scratchteam"</span>: <span style="color:var(--theme-global);">false</span>,
        <span style="color:var(--theme-string);">"history"</span>: {
        <span style="color:var(--theme-string);">"joined"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>
    },
    <span style="color:var(--theme-string);">"profile"</span>: {
    <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">USER ID</span>,
    <span style="color:var(--theme-string);">"images"</span>: {
        <span style="color:var(--theme-string);">"90x90"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
        <span style="color:var(--theme-string);">"60x60"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
        <span style="color:var(--theme-string);">"55x55"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
        <span style="color:var(--theme-string);">"50x50"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
        <span style="color:var(--theme-string);">"32x32"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
    },
    <span style="color:var(--theme-string);">"status": <span style="color:var(--theme-string);">"CONTENT"</span>,
            <span style="color:var(--theme-string);">"bio": <span style="color:var(--theme-string);">"CONTENT"</span>,
            <span style="color:var(--theme-string);">"country": <span style="color:var(--theme-string);">"COUNTRY"</span>
        }
    }
]</div></div></div>`
    },
    "follow()": {
        "visible": false,
        "content": `<div>Function for the logged-in user stop following the target user.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">follow</span>()</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:var(--theme-function);">follow</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "unfollow()": {
        "visible": false,
        "content": `<div>Function for the logged-in user stop following the target user.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">unfollow</span>()</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:var(--theme-function);">unfollow</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "getMessagesCount()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><div>Function that gets the messages count of the user.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getMessagesCount</span>()</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:var(--theme-function);">getMessagesCount</span>().<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div><div class="codeDemoOutput">{
    <span style="color: var(--theme-string);">"count"</span>: <span style="color: var(--theme-global);">0</span>
}</div></div></div>`
    },
    "Self()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--good-banner)">This function can be used without the session being initialised</span><div>Self constructor function for interacting with the logged-in account's profile. Inherits from <span class="codeSmall">User</span>.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">Self</span>()</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">Self</span>()
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div><h3 style="text-shadow: none; margin-top: 8px">Properties:</h3>
<div><h3 style="text-shadow: none; font-size: 17px"><span class="codeSmall">username</span></h3><br>
Value is the username of the targeted user. This is a writable value - if changed, the targeted user will also change.
<div class="codeDemo"><h3>Format</h3><div class="codeDemoContainer" style="color:#bfbfbf;"><span style="color:var(--theme-string);">"USERNAME"</span></div></div>
</div>
<div style="padding-top: 8px"><h3 style="text-shadow: none; font-size: 17px"><span class="codeSmall">xmlProfile</span></h3><br>
Value is a collection of methods for interacting with the <span class="codeSmall">site-api</span> API.
<div class="codeDemo"><h3>Format</h3><div class="codeDemoContainer" style="color:#bfbfbf;"><button class="docsLink" data-sidebarId="Self: xmlProfile">Self: xmlProfile</button></div></div>
</div>
<div style="padding-top: 8px"><h3 style="text-shadow: none; font-size: 17px"><span class="codeSmall">myStuff</span></h3><br>
Value is a collection of methods for interacting with the myStuff API.
<div class="codeDemo"><h3>Format</h3><div class="codeDemoContainer" style="color:#bfbfbf;"><button class="docsLink" data-sidebarId="myStuff">Self: myStuff</button></div></div>
</div>`,
        "children": [
            "Self: xmlProfile",
            "myStuff",
            "getSharedProjects()",
            "getFavoriteProjects()",
            "getFollowing()",
            "getFollowers()",
            "getCuratedStudios()",
            "getInfo()",
            "getMessagesCount()",
            "follow()",
            "unfollow()",
            "getAccountNavJson()",
            "getSession()",
            "getMessages()",
            "shareProject()",
            "unshareProject()",
            "setAsset()",
            "Self: getActivity()",
            "getFollowedStudioProjects()",
            "getFollowedUserProjects()",
            "getFollowedUserLoves()",
            "getRecentProjects()",
            "createProject()",
            "createStudio()",
        ]
    },
    "Self: xmlProfile": {
        "visible": false,
        "name": "xmlProfile",
        "content": `<span class="docsBanner" style="background: var(--warn-banner)">This collection has a format different to that of other <span class="codeSmall">xmlProfile</span> collections</span><div>Collection of methods for interacting with the <span class="codeSmall">site-api</span> API. Most output is either HTML or XML and can be parsed with the <span class="codeSmall"><button class="docsLink" data-sidebarId="xmlParser">xmlParser</button></span> collection.</div>`,
        "children": [
            "XML: getComments()",
            "XML: getActivity()",
            "getProfile()",
            "XML: getProjects()",
            "XML: getFavorites()",
            "XML: getCuratedStudios()",
            "getFollowedStudios()",
            "XML: getFollowedUsers()",
            "XML: getFollowingUsers()",
            "XML: postComment()",
            "XML: removeComment()",
            "toggleComments()",
        ]
    },
    "XML: removeComment()": {
        "visible": false,
        "name": "removeComment()",
        "content": `<span class="docsBanner" style="background: var(--warn-banner)">This function returns a HTML or XML string</span><span class="docsBanner" style="background: var(--warn-banner)">This function returns a value in a format different to that of other <span class="codeSmall">removeComment()</span></span><div>Function to remove a specific comment from the logged-in account's profile.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">removeComment</span>(<span style="color:#000;">commentId</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">self</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Self</span>()
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">self</span>.<span style="color:var(--theme-function);">removeComment</span>(<span style="color:var(--theme-string);">"987654321"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "toggleComments()": {
        "visible": false,
        "content": `<div>Function to toggle commenting on the logged-in account's profile.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">toggleComments</span>()</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">self</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color:var(--theme-function);">Self</span>()
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">self</span>.<span style="color:var(--theme-function);">toggleComments</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "myStuff": {
        "visible": false,
        "content": `<div>Collection of methods for interacting with the mystuff API. Part of the <span class="codeSmall">site-api</span> API, although it returns JSON not HTML or XML.`,
        "children": [
            "MyStuff: getProjects()",
            "MyStuff: getStudios()"
        ]
    },
    "MyStuff: getProjects()": {
        "visible": false,
        "name": "getProjects()",
        "content": `<div>Function that gets the user's projects in the My Stuff page.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getProjects</span>(<span style="color:#000">page</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:var(--theme-function);">getProjects</span>(<span style="color:var(--theme-string)">"1"</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div><div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string)">"fields"</span>: {
            <span style="color:var(--theme-string)">"view_count"</span>: <span style="color:var(--theme-global)">VIEW COUNT</span>,
            <span style="color:var(--theme-string)">"favorite_count"</span>: <span style="color:var(--theme-global)">FAVORITE COUNT</span>,
            <span style="color:var(--theme-string)">"remixers_count"</span>: <span style="color:var(--theme-global)">LOVE COUNT</span>,
            <span style="color:var(--theme-string)">"creator"</span>: {
                <span style="color:var(--theme-string)">"username"</span>: <span style="color:var(--theme-string)">"USERNAME"</span>,
                <span style="color:var(--theme-string)">"pk"</span>: <span style="color:var(--theme-global)">USER ID</span>,
                <span style="color:var(--theme-string)">"thumbnail_url"</span>: <span style="color:var(--theme-string)">"//uploads.scratch.mit.edu/users/avatars/USER ID.png"</span>,
                <span style="color:var(--theme-string)">"admin"</span>: <span style="color:var(--theme-global)">false</span>
            },
            <span style="color:var(--theme-string)">"title"</span>: <span style="color:var(--theme-string)">"TITLE"</span>,
            <span style="color:var(--theme-string)">"isPublished"</span>: <span style="color:var(--theme-global)">false</span>,
            <span style="color:var(--theme-string)">"datetime_created"</span>: <span style="color:var(--theme-string)">"TIMESTAMP"</span>,
            <span style="color:var(--theme-string)">"thumbnail_url"</span>: <span style="color:var(--theme-string)">"//uploads.scratch.mit.edu/projects/thumbnails/PROJECT ID.png"</span>,
            <span style="color:var(--theme-string)">"visibility"</span>: <span style="color:var(--theme-string)">"VISIBILITY"</span>,
            <span style="color:var(--theme-string)">"love_count"</span>: <span style="color:var(--theme-global)">LOVE COUNT</span>,
            <span style="color:var(--theme-string)">"datetime_modified"</span>: <span style="color:var(--theme-string)">"TIMESTAMP"</span>,
            <span style="color:var(--theme-string)">"uncached_thumbnail_url"</span>: <span style="color:var(--theme-string)">"//cdn2.scratch.mit.edu/get_image/project/PROJECT ID_100x80.png"</span>,
            <span style="color:var(--theme-string)">"thumbnail": "PROJECT ID.png"</span>,
            <span style="color:var(--theme-string)">"datetime_shared"</span>: <span style="color:var(--theme-string)">"TIMESTAMP"</span>,
            <span style="color:var(--theme-string)">"commenters_count"</span>: <span style="color:var(--theme-global)">COMMENT COUNT</span>
        },
        <span style="color:var(--theme-string)">"model"</span>: <span style="color:var(--theme-string)">"projects.project"</span>,
        <span style="color:var(--theme-string)">"pk"</span>: <span style="color:var(--theme-global)">PROJECT ID</span>
    }
]</div></div></div>`
    },
    "MyStuff: getStudios()": {
        "visible": false,
        "name": "getStudios()",
        "content": `<div>Function that gets the user's studios in the My Stuff page.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getStudios</span>(<span style="color:#000">page</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:var(--theme-function);">getStudios</span>(<span style="color:var(--theme-string)">"1"</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div><div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string)">"fields"</span>: {
            <span style="color:var(--theme-string)">"curators_count"</span>: <span style="color:var(--theme-global)">CURATORS COUNT</span>,
            <span style="color:var(--theme-string)">"projecters_count"</span>: <span style="color:var(--theme-global)">PROJECTS COUNT</span>,
            <span style="color:var(--theme-string)">"title"</span>: <span style="color:var(--theme-string)">"TITLE"</span>,
            <span style="color:var(--theme-string)">"datetime_created"</span>: <span style="color:var(--theme-string)">"TIMESTAMP"</span>,
            <span style="color:var(--theme-string)">"thumbnail_url"</span>: <span style="color:var(--theme-string)">"//uploads.scratch.mit.edu/galleries/thumbnails/STUDIO ID.png"</span>,
            <span style="color:var(--theme-string)">"commenters_count"</span>: <span style="color:var(--theme-global)">COMMENT COUNT</span>
            <span style="color:var(--theme-string)">"datetime_modified"</span>: <span style="color:var(--theme-string)">"TIMESTAMP"</span>,
            <span style="color:var(--theme-string)">"owner"</span>: {
                <span style="color:var(--theme-string)">"username"</span>: <span style="color:var(--theme-string)">"USERNAME"</span>,
                <span style="color:var(--theme-string)">"pk"</span>: <span style="color:var(--theme-global)">USER ID</span>,
                <span style="color:var(--theme-string)">"thumbnail_url"</span>: <span style="color:var(--theme-string)">"//uploads.scratch.mit.edu/users/avatars/USER ID.png"</span>,
                <span style="color:var(--theme-string)">"admin"</span>: <span style="color:var(--theme-global)">false</span>
            },
        },
        <span style="color:var(--theme-string)">"model"</span>: <span style="color:var(--theme-string)">"galleries.gallery"</span>,
        <span style="color:var(--theme-string)">"pk"</span>: <span style="color:var(--theme-global)">STUDIO ID</span>
    }
]</div></div></div>`
    },
    "getAccountNavJson()": {
        "visible": false,
        "content": `<div>Function that gets meta information about the logged-in account.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getAccountNavJson</span>()</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:var(--theme-function);">getAccountNavJson</span>().<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div><div class="codeDemoOutput">{
    <span style="color:var(--theme-string)">"ADMIN"</span>: <span style="color:var(--theme-global)">false</span>,
    <span style="color:var(--theme-string)">"LOGGED_IN_USER"</span>: {
        <span style="color:var(--theme-string)">"model"</span>: {
            <span style="color:var(--theme-string)">"username"</span>: <span style="color:var(--theme-string)">"USERNAME"</span>,
            <span style="color:var(--theme-string)">"id"</span>: <span style="color:var(--theme-global)">USER ID</span>,
            <span style="color:var(--theme-string)">"thumbnail_url"</span>: <span style="color:var(--theme-string)">"//cdn2.scratch.mit.edu/get_image/user/USER ID_32x32.png"</span>,
            <span style="color:var(--theme-string)">"username_truncated"</span>: <span style="color:var(--theme-string)">"TRUNCATED USERNAME"</span>,
            <span style="color:var(--theme-string)">"profile_url"</span>: <span style="color:var(--theme-string)">"/users/USERNAME/"</span>,
            <span style="color:var(--theme-string)">"is_educator"</span>: <span style="color:var(--theme-global)">false</span>,
            <span style="color:var(--theme-string)">"is_student"</span>: <span style="color:var(--theme-global)">false</span>,
            <span style="color:var(--theme-string)">"has_outstanding_email_confirmation"</span>: <span style="color:var(--theme-global)">false</span>
        },
        <span style="color:var(--theme-string)">"options"</span>: {
            <span style="color:var(--theme-string)">"authenticated"</span>: <span style="color:var(--theme-global)">true</span>
        }
    },
    <span style="color:var(--theme-string)">"IS_SOCIAL"</span>: <span style="color:var(--theme-global)">true</span>,
    <span style="color:var(--theme-string)">"TEMPLATE_CUES"</span>: {
        <span style="color:var(--theme-string)">"welcome"</span>: <span style="color:var(--theme-global)">true</span>,
        <span style="color:var(--theme-string)">"confirmed_email"</span>: <span style="color:var(--theme-global)">true</span>,
        <span style="color:var(--theme-string)">"unsupported_browser"</span>: <span style="color:var(--theme-global)">true</span>
    }
}</div></div></div>`
    },
    "getSession()": {
        "visible": false,
        "content": `<div>Function that gets the logged-in account's session information.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getSession</span>()</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:var(--theme-function);">getSession</span>().<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div><div class="codeDemoOutput">{
    <span style="color:var(--theme-string)">"user"</span>: {
        <span style="color:var(--theme-string)">"id"</span>: <span style="color:var(--theme-global)">USER ID</span>,
        <span style="color:var(--theme-string)">"banned"</span>:  <span style="color:var(--theme-global)">false</span>,
        <span style="color:var(--theme-string)">"should_vpn"</span>:  <span style="color:var(--theme-global)">false</span>,
        <span style="color:var(--theme-string)">"username"</span>: <span style="color:var(--theme-string)">"USERNAME"</span>,
        <span style="color:var(--theme-string)">"token"</span>: <span style="color:var(--theme-string)">"TOKEN"</span>,
        <span style="color:var(--theme-string)">"thumbnailUrl"</span>: <span style="color:var(--theme-string)">"//cdn2.scratch.mit.edu/get_image/user/USERNAME_32x32.png"</span>,
        <span style="color:var(--theme-string)">"dateJoined"</span>: <span style="color:var(--theme-string)">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string)">"email"</span>: <span style="color:var(--theme-string)">"EMAIL"</span>

    },
    <span style="color:var(--theme-string)">"permissions"</span>: {
        <span style="color:var(--theme-string)">"admin"</span>: <span style="color:var(--theme-global)">false</span>,
        <span style="color:var(--theme-string)">"scratcher"</span>: <span style="color:var(--theme-global)">true</span>,
        <span style="color:var(--theme-string)">"new_scratcher"</span>: <span style="color:var(--theme-global)">false</span>,
        <span style="color:var(--theme-string)">"invited_scratcher"</span>: <span style="color:var(--theme-global)">false</span>,
        <span style="color:var(--theme-string)">"social"</span>: <span style="color:var(--theme-global)">true</span>,
        <span style="color:var(--theme-string)">"educator"</span>: <span style="color:var(--theme-global)">false</span>,
        <span style="color:var(--theme-string)">"educator_invitee"</span>: <span style="color:var(--theme-global)">false</span>,
        <span style="color:var(--theme-string)">"student"</span>: <span style="color:var(--theme-global)">false</span>,
        <span style="color:var(--theme-string)">"mute_status"</span>: {}
    },
    <span style="color:var(--theme-string)">"flags"</span>: {
        <span style="color:var(--theme-string)">"must_reset_password"</span>: <span style="color:var(--theme-global)">false</span>,
        <span style="color:var(--theme-string)">"must_complete_registration"</span>: <span style="color:var(--theme-global)">false</span>,
        <span style="color:var(--theme-string)">"has_outstanding_email_confirmation"</span>: <span style="color:var(--theme-global)">false</span>,
        <span style="color:var(--theme-string)">"show_welcome"</span>: <span style="color:var(--theme-global)">true</span>,
        <span style="color:var(--theme-string)">"confirm_email_banner"</span>: <span style="color:var(--theme-global)">true</span>,
        <span style="color:var(--theme-string)">"unsupported_browser_banner"</span>: <span style="color:var(--theme-global)">true</span>,
        <span style="color:var(--theme-string)">"project_comments_enabled"</span>: <span style="color:var(--theme-global)">true</span>,
        <span style="color:var(--theme-string)">"gallery_comments_enabled"</span>: <span style="color:var(--theme-global)">true</span>,
        <span style="color:var(--theme-string)">"userprofile_comments_enabled"</span>: <span style="color:var(--theme-global)">true</span>,
        <span style="color:var(--theme-string)">"everything_is_totally_normal"</span>: <span style="color:var(--theme-global)">false</span>
    }
}</div></div></div>`
    },
    "getMessages()": {
        "visible": false,
        "content": `<div>Function that gets the logged-in account's messages.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getMessages</span>(<span style="color:#000;">offset</span>, <span style="color:#000;">limit</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:var(--theme-function);">getMessages</span>(<span style="color: var(--theme-string);">"0"</span>, <span style="color: var(--theme-string);">"1"</span>).<span style="color: var(--theme-function)">then</span>(<span style="color:#000;">x</span>=><span style="color:#000;">x</span>.<span style="color:var(--theme-function);">text</span>().<span style="color:var(--theme-function);">then</span>(<span style="color:#000;">console</span>.<span style="color:var(--theme-function);">log</span>))
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div><div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string)">"id"</span>: <span style="color:var(--theme-global)">MESSAGE ID</span>,
        <span style="color:var(--theme-string)">"datetime_created"</span>: <span style="color:var(--theme-string)">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string)">"actor_username"</span>: <span style="color:var(--theme-string)">"USERNAME"</span>,
        <span style="color:var(--theme-string)">"actor_id"</span>: <span style="color:var(--theme-global)">USER ID</span>,
        <span style="color:var(--theme-string)">"type"</span>: <span style="color:var(--theme-string)">"TYPE"</span>
    }
]
//Most messages also have additional keys (like "gallery_id" or "commentee") - you can find the format yourself by running the demo code after receiving a message.</div></div></div>`
    },
    "shareProject()": {
        "visible": false,
        "content": `<div>Function that shares a project owned by the logged-in account.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">shareProject</span>(<span style="color:#000;">projectId</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:var(--theme-function);">shareProject</span>(<span style="color: var(--theme-string);">"123456789"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "unshareProject()": {
        "visible": false,
        "content": `<div>Function that unshares a project owned by the logged-in account.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">unshareProject</span>(<span style="color:#000;">projectId</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:var(--theme-function);">unshareProject</span>(<span style="color: var(--theme-string);">"123456789"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "setAsset()": {
        "visible": false,
        "content": `<div>Function that saves an asset to Scratch.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">setAsset</span>(<span style="color:#000;">file</span>, <span style="color:#000;">extension</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:var(--theme-function);">setAsset</span>(<span style="color: var(--theme-string);">"&#x3C;svg&#x3E;&#x3C;circle cx=&#x22;50&#x22; cy=&#x22;50&#x22; r=&#x22;50&#x22; /&#x3E;&#x3C;/svg&#x3E;"</span>, <span style="color:var(--theme-string)">"svg"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div></div></div>`
    },
    "Self: getActivity()": {
        "visible": false,
        "name": "getActivity()",
        "content": `<div>Function to get the "What's happening" section of the logged-in account's home page.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getActivity</span>(<span style="color:#000;">offset</span>, <span style="color:#000;">limit</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:var(--theme-function);">getActivity</span>(<span style="color: var(--theme-string);">"0"</span>, <span style="color:var(--theme-string)">"1"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div><div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">ID</span>,
        <span style="color:var(--theme-string);">"datetime_created"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
        <span style="color:var(--theme-string);">"actor_username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
        <span style="color:var(--theme-string);">"actor_id"</span>: <span style="color:var(--theme-global);">USER ID</span>,
        <span style="color:var(--theme-string);">"type"</span>: <span style="color:var(--theme-string);">"TYPE"</span>
    }
]
//Most activity also has additional keys (like "project_id" or "gallery_id") - you can find the format yourself by running the demo code.</div></div></div>`
    },
    "getFollowedStudioProjects()": {
        "visible": false,
        "content": `<div>Function to get the new projects in studios followed by the logged-in account.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getFollowedStudioProjects</span>()</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:var(--theme-function);">getFollowedStudioProjects</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div><div class="codeDemoOutput">[
    <button class="docsLink" data-sidebarId="Unknown">Unknown</button>, likely similar to <span class="codeSmall"><button class="docsLink" data-sidebarId="getFollowedUserLoves()">getFollowedUserLoves()</button></span> output
]</div></div></div>`
    },
    "getFollowedUserProjects()": {
        "visible": false,
        "content": `<div>Function to get the projects recently published by users that the logged-in account follows.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getFollowedStudioProjects</span>()</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:var(--theme-function);">getFollowedUserProjects</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div><div class="codeDemoOutput">[
    <button class="docsLink" data-sidebarId="Unknown">Unknown</button>, likely similar to <span class="codeSmall"><button class="docsLink" data-sidebarId="getFollowedUserLoves()">getFollowedUserLoves()</button></span> output
]</div></div></div>`
    },
    "getFollowedUserLoves()": {
        "visible": false,
        "content": `<div>Function to get the projects recently loved by users that the logged-in account follows.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getFollowedUserLoves</span>()</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:var(--theme-function);">getFollowedUserLoves</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div><div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">123456789</span>,
        <span style="color:var(--theme-string);">"title"</span>: <span style="color:var(--theme-string);">"TITLE"</span>,
        <span style="color:var(--theme-string);">"description"</span>: <span style="color:var(--theme-string);">"DESCRIPTION"</span>,
        <span style="color:var(--theme-string);">"instructions"</span>: <span style="color:var(--theme-string);">"INSTRUCTIONS"</span>,
        <span style="color:var(--theme-string);">"visibility"</span>: <span style="color:var(--theme-string);">"VISIBILITY"</span>,
        <span style="color:var(--theme-string);">"public"</span>: <span style="color:var(--theme-global);">true</span>,
        <span style="color:var(--theme-string);">"comments_allowed"</span>: <span style="color:var(--theme-global);">true</span>,
        <span style="color:var(--theme-string);">"is_published"</span>: <span style="color:var(--theme-global);">true</span>,
        <span style="color:var(--theme-string);">"author"</span>: {
            <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">97654321</span>,
            <span style="color:var(--theme-string);">"username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
            <span style="color:var(--theme-string);">"scratchteam"</span>: <span style="color:var(--theme-global);">false</span>,
            <span style="color:var(--theme-string);">"history"</span>: {
            <span style="color:var(--theme-string);">"joined</span>": <span style="color:var(--theme-string);">"TIMESTAMP"</span>
        },
            <span style="color:var(--theme-string);">"profile"</span>: {
                <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">null</span>,
                <span style="color:var(--theme-string);">"images"</span>: {
                    <span style="color:var(--theme-string);">"90x90"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"60x60"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"55x55"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"50x50"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"32x32"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
                }
            }
        },
        <span style="color:var(--theme-string);">"image"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
        <span style="color:var(--theme-string);">"images"</span>: {
            <span style="color:var(--theme-string);">"282x218"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"216x163"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"200x200"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"144x108"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"135x102"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"100x80"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
        },
            <span style="color:var(--theme-string);">"history"</span>: {
            <span style="color:var(--theme-string);">"created"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
            <span style="color:var(--theme-string);">"modified"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
            <span style="color:var(--theme-string);">"shared"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>
        },
        <span style="color:var(--theme-string);">"stats"</span>: {
            <span style="color:var(--theme-string);">"views"</span>: <span style="color:var(--theme-global);">VIEW COUNT</span>,
            <span style="color:var(--theme-string);">"loves"</span>: <span style="color:var(--theme-global);">LOVE COUNT</span>,
            <span style="color:var(--theme-string);">"favorites"</span>: <span style="color:var(--theme-global);">FAVORITE COUNT</span>,
            <span style="color:var(--theme-string);">"remixes"</span>: <span style="color:var(--theme-global);">REMIX COUNT</span>
        },
        <span style="color:var(--theme-string);">"remix"</span>: {
            <span style="color:var(--theme-string);">"parent"</span>: <span style="color:var(--theme-global);">ID OR NULL</span>,
            <span style="color:var(--theme-string);">"root"</span>: <span style="color:var(--theme-global);">ID OR NULL</span>
        },
        <span style="color:var(--theme-string);">"project_token"</span>: <span style="color:var(--theme-string);">"TOKEN"</span>
    }
]</div></div></div>`
    },
    "getRecentProjects()": {
        "visible": false,
        "content": `<div>Function to get the projects recently viewed the logged-in account.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">getRecentProjects</span>(<span style="color:#000">offset</span>, <span style="color:#000">limit</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:var(--theme-function);">getRecentProjects</span>(<span style="color:var(--theme-string);">"0"</span>, <span style="color:var(--theme-string);">"1"</span>)
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div><div class="codeDemoOutput">[
    {
        <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">123456789</span>,
        <span style="color:var(--theme-string);">"title"</span>: <span style="color:var(--theme-string);">"TITLE"</span>,
        <span style="color:var(--theme-string);">"description"</span>: <span style="color:var(--theme-string);">"DESCRIPTION"</span>,
        <span style="color:var(--theme-string);">"instructions"</span>: <span style="color:var(--theme-string);">"INSTRUCTIONS"</span>,
        <span style="color:var(--theme-string);">"visibility"</span>: <span style="color:var(--theme-string);">"VISIBILITY"</span>,
        <span style="color:var(--theme-string);">"public"</span>: <span style="color:var(--theme-global);">true</span>,
        <span style="color:var(--theme-string);">"comments_allowed"</span>: <span style="color:var(--theme-global);">true</span>,
        <span style="color:var(--theme-string);">"is_published"</span>: <span style="color:var(--theme-global);">true</span>,
        <span style="color:var(--theme-string);">"author"</span>: {
            <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">97654321</span>,
            <span style="color:var(--theme-string);">"username"</span>: <span style="color:var(--theme-string);">"USERNAME"</span>,
            <span style="color:var(--theme-string);">"scratchteam"</span>: <span style="color:var(--theme-global);">false</span>,
            <span style="color:var(--theme-string);">"history"</span>: {
            <span style="color:var(--theme-string);">"joined</span>": <span style="color:var(--theme-string);">"TIMESTAMP"</span>
        },
            <span style="color:var(--theme-string);">"profile"</span>: {
                <span style="color:var(--theme-string);">"id"</span>: <span style="color:var(--theme-global);">null</span>,
                <span style="color:var(--theme-string);">"images"</span>: {
                    <span style="color:var(--theme-string);">"90x90"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"60x60"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"55x55"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"50x50"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
                    <span style="color:var(--theme-string);">"32x32"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
                }
            }
        },
        <span style="color:var(--theme-string);">"image"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
        <span style="color:var(--theme-string);">"images"</span>: {
            <span style="color:var(--theme-string);">"282x218"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"216x163"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"200x200"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"144x108"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"135x102"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>,
            <span style="color:var(--theme-string);">"100x80"</span>: <span style="color:var(--theme-string);">"IMAGE URL"</span>
        },
            <span style="color:var(--theme-string);">"history"</span>: {
            <span style="color:var(--theme-string);">"created"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
            <span style="color:var(--theme-string);">"modified"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>,
            <span style="color:var(--theme-string);">"shared"</span>: <span style="color:var(--theme-string);">"TIMESTAMP"</span>
        },
        <span style="color:var(--theme-string);">"stats"</span>: {
            <span style="color:var(--theme-string);">"views"</span>: <span style="color:var(--theme-global);">VIEW COUNT</span>,
            <span style="color:var(--theme-string);">"loves"</span>: <span style="color:var(--theme-global);">LOVE COUNT</span>,
            <span style="color:var(--theme-string);">"favorites"</span>: <span style="color:var(--theme-global);">FAVORITE COUNT</span>,
            <span style="color:var(--theme-string);">"remixes"</span>: <span style="color:var(--theme-global);">REMIX COUNT</span>
        },
        <span style="color:var(--theme-string);">"remix"</span>: {
            <span style="color:var(--theme-string);">"parent"</span>: <span style="color:var(--theme-global);">ID OR NULL</span>,
            <span style="color:var(--theme-string);">"root"</span>: <span style="color:var(--theme-global);">ID OR NULL</span>
        },
        <span style="color:var(--theme-string);">"project_token"</span>: <span style="color:var(--theme-string);">"TOKEN"</span>
    }
]</div></div></div>`
    },
    "createProject()": {
        "visible": false,
        "content": `<div>Function to create a new project. The optional <span class="codeSmall">data</span> parameter accepts project JSON as an argument.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">createProject</span>()
<span style="color:var(--theme-function);">createProject</span>(<span style="color:#000;">data</span>)</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:var(--theme-function);">createProject</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div><div class="codeDemoOutput">{
    <span style="color:var(--theme-string);">"status"</span>: <span style="color:var(--theme-string);">"ok"</span>,
    <span style="color:var(--theme-string);">"content-name"</span>: <span style="color:var(--theme-string);">"PROJECT ID"</span>,
    <span style="color:var(--theme-string);">"content-title"</span>: <span style="color:var(--theme-string);">"HASH"</span>,
    <span style="color:var(--theme-string);">"autosave-interval"</span>: <span style="color:var(--theme-string);">"UNKNOWN NUMBER STRING"</span>
}
</div></div></div>`
    },
    "createStudio()": {
        "visible": false,
        "content": `<span class="docsBanner" style="background: var(--warn-banner)">This function will not work if the session account is of "new Scratcher" status</span><div>Function to create a new studio.<div class="codeDemo"><h3>Syntax</h3><div class="codeDemoContainer"><span style="color:var(--theme-function);">createStudio</span>()</div></div><div class="codeDemo"><h3>Example</h3>
<div class="codeDemoContainer"><span style="color:var(--theme-def);">const</span> <span style="color: var(--theme-function)">Session</span> = <span style="color:var(--theme-function);">require</span>(<span style="color:var(--theme-string)">"javascratch"</span>).<span style="color:var(--theme-function);">Session</span>
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">session</span> = <span style="color:var(--theme-def);">new</span> <span style="color:var(--theme-function);">Session</span>(<span style="color:var(--theme-string)">"USERNAME"</span>, <span style="color:var(--theme-string)">"PASSWORD"</span>)
<span style="color:var(--theme-def);">const</span> <span style="color:#000;">user</span> = <span style="color:var(--theme-def);">new</span> <span style="color:#000;">session</span>.<span style="color: var(--theme-function)">User</span>(<span style="color:var(--theme-string)">"Username"</span>)
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">onReady</span> = () => {
    <span style="color:#000;">user</span>.<span style="color:var(--theme-function);">createStudio</span>()
}
<span style="color:#000;">session</span>.<span style="color:var(--theme-function);">initialize</span>()</div><div class="codeDemoOutput">{
    <span style="color:var(--theme-string);">"redirect"</span>: <span style="color:var(--theme-string);">"/studios/STUDIO ID/"</span>,
    <span style="color:var(--theme-string);">"success"</span>: <span style="color:var(--theme-global);">true</span>
}
</div></div></div>`
    }
}